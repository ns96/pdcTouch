/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package pdcstv3s;

import java.awt.Color;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.text.BadLocationException;
import javax.swing.text.DefaultHighlighter;
import javax.swing.text.Highlighter;

/**
 *
 * @author nathan
 */
public class PDCSTV3Frame extends javax.swing.JFrame {

    private boolean connected = false;
    private int row = 1, srow1 = 1, srow2 = 1;
    private boolean paused = true;
    
    // define some menus
    private enum Menu {
        MAIN,
        ANALOG,
        DIGITAL,
        RAMP,
        DIPCOAT,
        SETUP,
        SETUP_BLDC,
        SETUP_STEPPER
    }
    private Menu currentMenu = Menu.MAIN;
    private Menu backMenu = null;

    /**
     * Creates new form PDCSTV3Frame
     */
    public PDCSTV3Frame() {
        initComponents();

        // display the main
        displayMenu(0);
    }

    private void displayMenu(int change) {
        if (currentMenu == Menu.MAIN) {
            backMenu = null;
            
            row -= change;
            if(row > 5) row = 5;
            if(row < 1) row = 1;
            
            screenTextArea.setText(getMainMenuText());
            highlightText("DIP COATER");
        } else if (currentMenu == Menu.ANALOG) {
            backMenu = Menu.MAIN;
            displayAnalogMenu(change);
        } else if (currentMenu == Menu.DIGITAL) {
            backMenu = Menu.MAIN;
            displayDigitalMenu(change);
        } else if (currentMenu == Menu.RAMP) {
            backMenu = Menu.MAIN;
            displayRampMenu(change);
        } else if (currentMenu == Menu.DIPCOAT) {
            backMenu = Menu.MAIN;
            displayDipCoaterMenu(change);
        } else if (currentMenu == Menu.SETUP) {
            backMenu = Menu.MAIN;
            displaySetupMenu(change);
        } else if (currentMenu == Menu.SETUP_BLDC) {
            backMenu = Menu.SETUP;
            displaySetupBLDCMenu(change);
        } else if (currentMenu == Menu.SETUP_STEPPER) {
            backMenu = Menu.SETUP;
            displaySetupStepperMenu(change);
        }
    }

    private void displayAnalogMenu(int change) {
        StringBuilder sb = new StringBuilder();
        sb.append("ANALOG CONTROL\n");
        
        screenTextArea.setText(sb.toString());
    }
    
    private void displayDigitalMenu(int change) {
        StringBuilder sb = new StringBuilder();
        sb.append("DIGITAL CONTROL\n");
        
        screenTextArea.setText(sb.toString());
    }
    
    private void displayRampMenu(int change) {
        StringBuilder sb = new StringBuilder();
        sb.append("RAMP CONTROL\n");
        
        screenTextArea.setText(sb.toString());
    }
    
    private void displayDipCoaterMenu(int change) {
        StringBuilder sb = new StringBuilder();
        sb.append("DIP COATER\n");
        
        screenTextArea.setText(sb.toString());
    }
    
    private void displaySetupMenu(int change) {
        StringBuilder sb = new StringBuilder();
        sb.append("SETUP\n");
        
        screenTextArea.setText(sb.toString());
    }
    
    private void displaySetupBLDCMenu(int change) {
        StringBuilder sb = new StringBuilder();
        sb.append("BLDC SETUP\n");
        
        screenTextArea.setText(sb.toString());
    }
    
    private void displaySetupStepperMenu(int change) {
        StringBuilder sb = new StringBuilder();
        sb.append("STEPPER SETUP\n");
        
        screenTextArea.setText(sb.toString());
    }
    
    /**
     * Method to highlight a particular ext on the simulated screen
     *
     * @param text
     */
    private void highlightText(String word) {
        try {
            Highlighter highlighter = screenTextArea.getHighlighter();
            int p0 = screenTextArea.getText().indexOf(word);
            int p1 = p0 + word.length();
            highlighter.addHighlight(p0, p1,
                    new DefaultHighlighter.DefaultHighlightPainter(Color.LIGHT_GRAY));
        } catch (BadLocationException ex) {
            Logger.getLogger(PDCSTV3Frame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        powerButton = new javax.swing.JButton();
        jSlider1 = new javax.swing.JSlider();
        connectToggleButton = new javax.swing.JToggleButton();
        commTextField = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        screenTextArea = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        consoleTextArea = new javax.swing.JTextArea();
        clearButton = new javax.swing.JButton();
        entButton = new javax.swing.JButton();
        upButton = new javax.swing.JButton();
        downButton = new javax.swing.JButton();
        extButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("PDC STV3S Simulator v1.0");

        powerButton.setText("Power");

        jSlider1.setMajorTickSpacing(10);
        jSlider1.setOrientation(javax.swing.JSlider.VERTICAL);
        jSlider1.setPaintLabels(true);
        jSlider1.setPaintTicks(true);
        jSlider1.setValue(0);

        connectToggleButton.setText("Connect");
        connectToggleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectToggleButtonActionPerformed(evt);
            }
        });

        commTextField.setColumns(5);
        commTextField.setText("COM8");

        screenTextArea.setEditable(false);
        screenTextArea.setBackground(new java.awt.Color(204, 255, 153));
        screenTextArea.setColumns(20);
        screenTextArea.setFont(new java.awt.Font("Monospaced", 1, 24)); // NOI18N
        screenTextArea.setRows(5);
        jScrollPane1.setViewportView(screenTextArea);

        consoleTextArea.setEditable(false);
        consoleTextArea.setColumns(20);
        consoleTextArea.setRows(5);
        consoleTextArea.setText("Console");
        jScrollPane2.setViewportView(consoleTextArea);

        clearButton.setText("Clear");

        entButton.setText("ENT");
        entButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                entButtonActionPerformed(evt);
            }
        });

        upButton.setText("UP");
        upButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                upButtonActionPerformed(evt);
            }
        });

        downButton.setText("DOWN");
        downButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                downButtonActionPerformed(evt);
            }
        });

        extButton.setText("EXT");
        extButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                extButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(entButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(upButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(downButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(extButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 19, Short.MAX_VALUE)
                        .addComponent(connectToggleButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(commTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(clearButton))
                    .addComponent(jScrollPane1)
                    .addComponent(jScrollPane2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(powerButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jSlider1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSlider1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 128, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(powerButton)
                    .addComponent(connectToggleButton)
                    .addComponent(commTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(clearButton)
                    .addComponent(entButton)
                    .addComponent(upButton)
                    .addComponent(downButton)
                    .addComponent(extButton)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Connect to the MiM board
     *
     * @param evt
     */
    private void connectToggleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connectToggleButtonActionPerformed

    }//GEN-LAST:event_connectToggleButtonActionPerformed

    private void upButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_upButtonActionPerformed
        displayMenu(1);
    }//GEN-LAST:event_upButtonActionPerformed

    private void downButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_downButtonActionPerformed
        displayMenu(-1);
    }//GEN-LAST:event_downButtonActionPerformed

    private void entButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_entButtonActionPerformed
        if (currentMenu == Menu.MAIN) {
            switch (row) {
                case 1: currentMenu = Menu.ANALOG;
                    break;
                case 2: currentMenu = Menu.DIGITAL;
                    break;
                case 3: currentMenu = Menu.RAMP;
                    break;
                case 4: currentMenu = Menu.DIPCOAT;
                    break;
                case 5: currentMenu = Menu.SETUP;
                    break;
                default: currentMenu = Menu.MAIN;
                    break;
            }
            
            displayMenu(0);
        }
    }//GEN-LAST:event_entButtonActionPerformed

    private void extButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_extButtonActionPerformed
        if(backMenu != null && paused) {
            currentMenu = backMenu;
            displayMenu(0);
        } else {
            paused = true;
        }
    }//GEN-LAST:event_extButtonActionPerformed

    private String getMainMenuText() {
        StringBuilder sb = new StringBuilder();
        sb.append("SELECT MODE\n");

        sb.append(((row == 1) ? "  *ANALOG\n" : "   ANALOG\n"));
        sb.append(((row == 2) ? "  *DIGITAL\n" : "   DIGITAL\n"));
        sb.append(((row == 3) ? "  *RAMP\n" : "   RAMP\n"));
        sb.append(((row == 4) ? "  *DIP COATER\n" : "   DIP COATER\n"));
        sb.append(((row == 5) ? "  *SETUP" : "   SETUP"));

        return sb.toString();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PDCSTV3Frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PDCSTV3Frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PDCSTV3Frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PDCSTV3Frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PDCSTV3Frame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton clearButton;
    private javax.swing.JTextField commTextField;
    private javax.swing.JToggleButton connectToggleButton;
    private javax.swing.JTextArea consoleTextArea;
    private javax.swing.JButton downButton;
    private javax.swing.JButton entButton;
    private javax.swing.JButton extButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSlider jSlider1;
    private javax.swing.JButton powerButton;
    private javax.swing.JTextArea screenTextArea;
    private javax.swing.JButton upButton;
    // End of variables declaration//GEN-END:variables
}
