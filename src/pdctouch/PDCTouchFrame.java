/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package pdctouch;

import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.Timer;

/**
 *
 * @author nathan
 */
public class PDCTouchFrame extends javax.swing.JFrame {
    private PDCTouchDevice pdcDevice = new PDCTouchDevice();
    
    private Timer spinCoaterTimer; 
    private Timer rampTimer;
    
    private JPanel lastPanel = null;
    private final int[] SPEED_INCREMENT = {2, 10, 50, 100};
    private int speedIncrementIndex = 0;
    private int pwmValue = 1000;
    
    private boolean moving = false;
    private int movingTime = 0;
    
    // the current ramp mode
    private int rampMode = 1;
    private int rampStep = 1;
    
    // variable for the keypad panel
    private int clearCount = 0;
    private String keypadValue = "";
    
    // variables for all setup panel
    private int setupRow = 0; // the currently selected parameter to change
    private int setupParamIndex = 0; // the index for a particular parameter
    private JLabel setupCurrentLabel = null; // used for reseting the label foreground to white
    
    // variables used by ramp setup panels
    private int rampPanelNumber = 1;
    private final int[] SETUP_INCREMENT = {1, 2, 5, 10, 50, 100};
    private int setupIncrementIndex = 1;
    
    /**
     * Creates new form PDCTouchFrame
     */
    public PDCTouchFrame() {
        initComponents();
        initTimers();
    }
    
    private void initTimers() {
        // initial the timer for updating the seconds counter and speed
        spinCoaterTimer = new Timer(1000, (ActionEvent evt) -> {
            movingTime++;
            String timeValue = String.format("%05d", movingTime);
            spinCoaterTimerLabel.setText(timeValue);
            
            // get the speed value
            int speed = pdcDevice.getSpeed(pwmValue);
            spinCoaterSpeedLabel.setText("" + speed);
        
            if (!moving) {
                movingTime = 0;
                timeValue = String.format("%05d", movingTime);
                spinCoaterTimerLabel.setText(timeValue);
                spinCoaterSpeedLabel.setText("0");
                spinCoaterTimer.stop();
            }
        });
        
        // initial the timer for updating labels in ramp mode
        rampTimer = new Timer(1000, (ActionEvent evt) -> {
            movingTime--;
            
            // move to the next step once we hit zero
            if(movingTime == 0) {
                rampStep++;
                movingTime = pdcDevice.rampMode[4];
                pwmValue = pdcDevice.rampMode[5];
            }
            
            if(rampStep == 1) {
                rampMinLabel.setForeground(Color.red);
                rampMinTimeLabel.setText("" + movingTime);
            } else if (rampStep == 2) {
                rampMinLabel.setForeground(Color.white);
                rampMaxLabel.setForeground(Color.red);
                rampMinTimeLabel.setText("0");
                rampMaxTimeLabel.setText("" + movingTime);
            } else {
                moving = false;
            }
            
            // update the pwm and speed value
            rampPWMLabel.setText("" + pwmValue);
            int speed = pdcDevice.getSpeed(pwmValue);
            rampSpeedLabel.setText("" + speed);
        
            if (!moving) {
                movingTime = 0;
                
                rampMinLabel.setForeground(Color.white);
                rampMinTimeLabel.setText("" + pdcDevice.rampMode[1]);
                
                rampMaxLabel.setForeground(Color.white);
                rampMaxTimeLabel.setText("" + pdcDevice.rampMode[4]);
                
                rampSpeedLabel.setText("0");
                rampPWMLabel.setText("1000");
                rampTimer.stop();
            }
        });
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        spinCoaterButton = new javax.swing.JButton();
        spinCoaterRampButton = new javax.swing.JButton();
        dipCoaterButton = new javax.swing.JButton();
        setupButton = new javax.swing.JButton();
        aboutButton = new javax.swing.JButton();
        spinCoaterPanel = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        spinCoaterBackButton = new javax.swing.JButton();
        spinCoaterInputButton = new javax.swing.JButton();
        spinCoaterIncrementButton = new javax.swing.JButton();
        spinCoaterGoButton = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        spinCoaterSpeedLabel = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        spinCoaterPWMLabel = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        spinCoaterTimerLabel = new javax.swing.JLabel();
        spinCoaterLeftButton = new javax.swing.JButton();
        spinCoaterRightButton = new javax.swing.JButton();
        keyPadInputPanel = new javax.swing.JPanel();
        keyPadInputLabel = new javax.swing.JLabel();
        keyPadClearButton = new javax.swing.JButton();
        keyPadOKButton = new javax.swing.JButton();
        keyPadButton00 = new javax.swing.JButton();
        keyPadButton09 = new javax.swing.JButton();
        keyPadButton06 = new javax.swing.JButton();
        keyPadButton05 = new javax.swing.JButton();
        keyPadButton01 = new javax.swing.JButton();
        keyPadButton07 = new javax.swing.JButton();
        keyPadButton08 = new javax.swing.JButton();
        keyPadButton04 = new javax.swing.JButton();
        keyPadButton02 = new javax.swing.JButton();
        keyPadButton03 = new javax.swing.JButton();
        spinCoaterRampPanel = new javax.swing.JPanel();
        rampModeLabel = new javax.swing.JLabel();
        rampBackButton = new javax.swing.JButton();
        rampStopButton = new javax.swing.JButton();
        rampUpButton = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        rampMinLabel = new javax.swing.JLabel();
        rampMinSpeedLabel = new javax.swing.JLabel();
        rampMinTimeLabel = new javax.swing.JLabel();
        rampMaxLabel = new javax.swing.JLabel();
        rampMaxSpeedLabel = new javax.swing.JLabel();
        rampMaxTimeLabel = new javax.swing.JLabel();
        jLabel61 = new javax.swing.JLabel();
        rampSpeedLabel = new javax.swing.JLabel();
        jLabel29 = new javax.swing.JLabel();
        jLabel30 = new javax.swing.JLabel();
        rampPWMLabel = new javax.swing.JLabel();
        jLabel32 = new javax.swing.JLabel();
        rampDownButton = new javax.swing.JButton();
        rampStartButton = new javax.swing.JButton();
        setupPanel = new javax.swing.JPanel();
        speedInputLabel1 = new javax.swing.JLabel();
        setupBackButton = new javax.swing.JButton();
        setupButton7 = new javax.swing.JButton();
        setupButton6 = new javax.swing.JButton();
        setupButton5 = new javax.swing.JButton();
        setupRampButton2 = new javax.swing.JButton();
        setupRampButton1 = new javax.swing.JButton();
        setupMotorButton = new javax.swing.JButton();
        setupRampButton3 = new javax.swing.JButton();
        setupRampButton4 = new javax.swing.JButton();
        setupStepperButton = new javax.swing.JButton();
        setupStartModeButton = new javax.swing.JButton();
        setupDipCoatButton = new javax.swing.JButton();
        dipCoaterPanel = new javax.swing.JPanel();
        jLabel26 = new javax.swing.JLabel();
        backButton3 = new javax.swing.JButton();
        jLabel39 = new javax.swing.JLabel();
        aboutPanel = new javax.swing.JPanel();
        jLabel27 = new javax.swing.JLabel();
        backButton4 = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jLabel42 = new javax.swing.JLabel();
        jLabel28 = new javax.swing.JLabel();
        jLabel43 = new javax.swing.JLabel();
        jLabel44 = new javax.swing.JLabel();
        jLabel41 = new javax.swing.JLabel();
        setupMotorPanel = new javax.swing.JPanel();
        setupMotorLabel = new javax.swing.JLabel();
        backSetupButton = new javax.swing.JButton();
        motorSetupRightButton = new javax.swing.JButton();
        motorSetupUpButton = new javax.swing.JButton();
        jPanel7 = new javax.swing.JPanel();
        motorSetupNameLabel = new javax.swing.JLabel();
        motorSetupNameValueLabel = new javax.swing.JLabel();
        motorSetupPoleLabel = new javax.swing.JLabel();
        motorSetupPoleValueLabel = new javax.swing.JLabel();
        motorSetupALabel = new javax.swing.JLabel();
        motorSetupBLabel = new javax.swing.JLabel();
        motorSetupCLabel = new javax.swing.JLabel();
        motorSetupDLabel = new javax.swing.JLabel();
        motorSetupDownButton = new javax.swing.JButton();
        motorSetupLeftButton = new javax.swing.JButton();
        setupStartModePanel = new javax.swing.JPanel();
        jLabel56 = new javax.swing.JLabel();
        setupStartModeBackButton = new javax.swing.JButton();
        setupStartModeUpButton = new javax.swing.JButton();
        jPanel8 = new javax.swing.JPanel();
        setupStartModeNoneLabel = new javax.swing.JLabel();
        setupStartModeSCMLabel = new javax.swing.JLabel();
        setupStartModeSCRLabel = new javax.swing.JLabel();
        setupStartModeDCLabel = new javax.swing.JLabel();
        setupStartModeDownButton = new javax.swing.JButton();
        setupStepperPanel = new javax.swing.JPanel();
        jLabel64 = new javax.swing.JLabel();
        stepperSetupBackButton = new javax.swing.JButton();
        stepperSetupRightButton = new javax.swing.JButton();
        stepperSetupUpButton = new javax.swing.JButton();
        jPanel9 = new javax.swing.JPanel();
        stepperSetupActiveLabel = new javax.swing.JLabel();
        stepperSetupActiveValueLabel = new javax.swing.JLabel();
        stepperSetupSPRLabel = new javax.swing.JLabel();
        stepperSetupSPRValueLabel = new javax.swing.JLabel();
        stepperSetupRPMLabel = new javax.swing.JLabel();
        stepperSetupRPMValueLabel = new javax.swing.JLabel();
        stepperSetupDirectionLabel = new javax.swing.JLabel();
        stepperSetupDirectionValueLabel = new javax.swing.JLabel();
        stepperSetupExcitationLabel = new javax.swing.JLabel();
        stepperSetupExcitationValueLabel = new javax.swing.JLabel();
        stepperSetupDownButton = new javax.swing.JButton();
        stepperSetupLeftButton = new javax.swing.JButton();
        setupRampModePanel = new javax.swing.JPanel();
        rampSetupModeLabel = new javax.swing.JLabel();
        rampSetupBackButton = new javax.swing.JButton();
        rampSetupRightButton = new javax.swing.JButton();
        rampSetupUpButton = new javax.swing.JButton();
        jPanel10 = new javax.swing.JPanel();
        rampSetupMinRPMLabel = new javax.swing.JLabel();
        rampSetupMinRPMValueLabel = new javax.swing.JLabel();
        rampSetupMinTimeLabel = new javax.swing.JLabel();
        rampSetupMinTimeValueLabel = new javax.swing.JLabel();
        rampSetupMaxRPMLabel = new javax.swing.JLabel();
        rampSetupMaxRPMValueLabel = new javax.swing.JLabel();
        rampSetupMaxTimeLabel = new javax.swing.JLabel();
        rampSetupMaxTimeValueLabel = new javax.swing.JLabel();
        jLabel84 = new javax.swing.JLabel();
        rampSetupSpeedLabel = new javax.swing.JLabel();
        jLabel86 = new javax.swing.JLabel();
        rampSetupPWMLabel = new javax.swing.JLabel();
        rampSetupDownButton = new javax.swing.JButton();
        rampSetupLeftButton = new javax.swing.JButton();
        rampSetupIncrementButton = new javax.swing.JButton();
        closeButton = new javax.swing.JButton();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        screenPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        consoleTextArea = new javax.swing.JTextArea();
        clearButton = new javax.swing.JButton();

        mainPanel.setBackground(java.awt.Color.black);
        mainPanel.setLayout(new java.awt.GridLayout(3, 2, 5, 5));

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel2.setForeground(java.awt.Color.white);
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("MAIN MENU");
        mainPanel.add(jLabel2);

        spinCoaterButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        spinCoaterButton.setForeground(java.awt.Color.white);
        spinCoaterButton.setText("SPIN COATER (MANUAL)");
        spinCoaterButton.setBorder(new javax.swing.border.LineBorder(java.awt.Color.white, 1, true));
        spinCoaterButton.setContentAreaFilled(false);
        spinCoaterButton.setFocusPainted(false);
        spinCoaterButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                spinCoaterButtonActionPerformed(evt);
            }
        });
        mainPanel.add(spinCoaterButton);

        spinCoaterRampButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        spinCoaterRampButton.setForeground(java.awt.Color.white);
        spinCoaterRampButton.setText("SPIN COATER (RAMP)");
        spinCoaterRampButton.setBorder(new javax.swing.border.LineBorder(java.awt.Color.white, 1, true));
        spinCoaterRampButton.setContentAreaFilled(false);
        spinCoaterRampButton.setFocusPainted(false);
        spinCoaterRampButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                spinCoaterRampButtonActionPerformed(evt);
            }
        });
        mainPanel.add(spinCoaterRampButton);

        dipCoaterButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        dipCoaterButton.setForeground(java.awt.Color.white);
        dipCoaterButton.setText("DIP COATER");
        dipCoaterButton.setBorder(new javax.swing.border.LineBorder(java.awt.Color.white, 1, true));
        dipCoaterButton.setContentAreaFilled(false);
        dipCoaterButton.setFocusPainted(false);
        dipCoaterButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dipCoaterButtonActionPerformed(evt);
            }
        });
        mainPanel.add(dipCoaterButton);

        setupButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        setupButton.setForeground(java.awt.Color.white);
        setupButton.setText("SETUP");
        setupButton.setBorder(new javax.swing.border.LineBorder(java.awt.Color.white, 1, true));
        setupButton.setContentAreaFilled(false);
        setupButton.setFocusPainted(false);
        setupButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setupButtonActionPerformed(evt);
            }
        });
        mainPanel.add(setupButton);

        aboutButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        aboutButton.setForeground(java.awt.Color.white);
        aboutButton.setText("ABOUT");
        aboutButton.setBorder(new javax.swing.border.LineBorder(java.awt.Color.white, 1, true));
        aboutButton.setContentAreaFilled(false);
        aboutButton.setFocusable(false);
        aboutButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutButtonActionPerformed(evt);
            }
        });
        mainPanel.add(aboutButton);

        spinCoaterPanel.setBackground(java.awt.Color.black);
        spinCoaterPanel.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), javax.swing.BorderFactory.createEmptyBorder(10, 20, 10, 20)));

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel6.setForeground(java.awt.Color.white);
        jLabel6.setText("SPIN COATER / MANUAL MODE");

        spinCoaterBackButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        spinCoaterBackButton.setForeground(java.awt.Color.white);
        spinCoaterBackButton.setText("BACK");
        spinCoaterBackButton.setBorder(new javax.swing.border.LineBorder(java.awt.Color.white, 1, true));
        spinCoaterBackButton.setContentAreaFilled(false);
        spinCoaterBackButton.setFocusable(false);
        spinCoaterBackButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                spinCoaterBackButtonActionPerformed(evt);
            }
        });

        spinCoaterInputButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        spinCoaterInputButton.setForeground(java.awt.Color.white);
        spinCoaterInputButton.setText("###");
        spinCoaterInputButton.setBorder(new javax.swing.border.LineBorder(java.awt.Color.white, 1, true));
        spinCoaterInputButton.setContentAreaFilled(false);
        spinCoaterInputButton.setFocusable(false);
        spinCoaterInputButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                spinCoaterInputButtonActionPerformed(evt);
            }
        });

        spinCoaterIncrementButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        spinCoaterIncrementButton.setForeground(java.awt.Color.white);
        spinCoaterIncrementButton.setText("INC * 2");
        spinCoaterIncrementButton.setBorder(new javax.swing.border.LineBorder(java.awt.Color.white, 1, true));
        spinCoaterIncrementButton.setContentAreaFilled(false);
        spinCoaterIncrementButton.setFocusable(false);
        spinCoaterIncrementButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                spinCoaterIncrementButtonActionPerformed(evt);
            }
        });

        spinCoaterGoButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        spinCoaterGoButton.setForeground(java.awt.Color.white);
        spinCoaterGoButton.setText("GO");
        spinCoaterGoButton.setBorder(new javax.swing.border.LineBorder(java.awt.Color.white, 1, true));
        spinCoaterGoButton.setContentAreaFilled(false);
        spinCoaterGoButton.setFocusPainted(false);
        spinCoaterGoButton.setMaximumSize(new java.awt.Dimension(75, 50));
        spinCoaterGoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                spinCoaterGoButtonActionPerformed(evt);
            }
        });

        jPanel3.setBackground(java.awt.Color.black);
        jPanel3.setLayout(new java.awt.GridLayout(3, 2));

        jLabel10.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel10.setForeground(java.awt.Color.white);
        jLabel10.setText("SPEED (RPM)");
        jPanel3.add(jLabel10);

        spinCoaterSpeedLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        spinCoaterSpeedLabel.setForeground(java.awt.Color.white);
        spinCoaterSpeedLabel.setText("0");
        spinCoaterSpeedLabel.setToolTipText("");
        jPanel3.add(spinCoaterSpeedLabel);

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel7.setForeground(java.awt.Color.white);
        jLabel7.setText("PWM (us)");
        jPanel3.add(jLabel7);

        spinCoaterPWMLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        spinCoaterPWMLabel.setForeground(java.awt.Color.white);
        spinCoaterPWMLabel.setText("1000");
        jPanel3.add(spinCoaterPWMLabel);

        jLabel9.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel9.setForeground(java.awt.Color.white);
        jLabel9.setText("TIME (s)");
        jPanel3.add(jLabel9);

        spinCoaterTimerLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        spinCoaterTimerLabel.setForeground(java.awt.Color.white);
        spinCoaterTimerLabel.setText("0000");
        jPanel3.add(spinCoaterTimerLabel);

        spinCoaterLeftButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        spinCoaterLeftButton.setForeground(java.awt.Color.white);
        spinCoaterLeftButton.setText("<");
        spinCoaterLeftButton.setBorder(new javax.swing.border.LineBorder(java.awt.Color.white, 1, true));
        spinCoaterLeftButton.setContentAreaFilled(false);
        spinCoaterLeftButton.setFocusable(false);
        spinCoaterLeftButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                spinCoaterLeftButtonActionPerformed(evt);
            }
        });

        spinCoaterRightButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        spinCoaterRightButton.setForeground(java.awt.Color.white);
        spinCoaterRightButton.setText(">");
        spinCoaterRightButton.setBorder(new javax.swing.border.LineBorder(java.awt.Color.white, 1, true));
        spinCoaterRightButton.setContentAreaFilled(false);
        spinCoaterRightButton.setFocusable(false);
        spinCoaterRightButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                spinCoaterRightButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout spinCoaterPanelLayout = new javax.swing.GroupLayout(spinCoaterPanel);
        spinCoaterPanel.setLayout(spinCoaterPanelLayout);
        spinCoaterPanelLayout.setHorizontalGroup(
            spinCoaterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(spinCoaterPanelLayout.createSequentialGroup()
                .addGroup(spinCoaterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel6)
                    .addGroup(spinCoaterPanelLayout.createSequentialGroup()
                        .addComponent(spinCoaterIncrementButton, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(spinCoaterLeftButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(spinCoaterRightButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(spinCoaterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(spinCoaterBackButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 107, Short.MAX_VALUE)
                    .addComponent(spinCoaterGoButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(spinCoaterInputButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 0, 0))
        );
        spinCoaterPanelLayout.setVerticalGroup(
            spinCoaterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(spinCoaterPanelLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jLabel6)
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(spinCoaterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(spinCoaterPanelLayout.createSequentialGroup()
                        .addComponent(spinCoaterGoButton, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(spinCoaterInputButton, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(spinCoaterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(spinCoaterBackButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(spinCoaterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(spinCoaterIncrementButton, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(spinCoaterLeftButton, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(spinCoaterRightButton, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(1, 1, 1))
        );

        keyPadInputPanel.setBackground(java.awt.Color.black);
        keyPadInputPanel.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), javax.swing.BorderFactory.createEmptyBorder(10, 20, 10, 20)));

        keyPadInputLabel.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        keyPadInputLabel.setForeground(java.awt.Color.white);
        keyPadInputLabel.setText("SPEED INPUT -> RPM: ? / PWM: ? us");

        keyPadClearButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        keyPadClearButton.setForeground(java.awt.Color.white);
        keyPadClearButton.setText("CLEAR");
        keyPadClearButton.setBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.white));
        keyPadClearButton.setContentAreaFilled(false);
        keyPadClearButton.setFocusable(false);
        keyPadClearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                keyPadClearButtonActionPerformed(evt);
            }
        });

        keyPadOKButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        keyPadOKButton.setForeground(java.awt.Color.white);
        keyPadOKButton.setText("OK");
        keyPadOKButton.setBorder(new javax.swing.border.LineBorder(java.awt.Color.white, 1, true));
        keyPadOKButton.setContentAreaFilled(false);
        keyPadOKButton.setFocusable(false);
        keyPadOKButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                keyPadOKButtonActionPerformed(evt);
            }
        });

        keyPadButton00.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        keyPadButton00.setForeground(java.awt.Color.white);
        keyPadButton00.setText("0");
        keyPadButton00.setBorder(new javax.swing.border.LineBorder(java.awt.Color.white, 1, true));
        keyPadButton00.setContentAreaFilled(false);
        keyPadButton00.setFocusable(false);
        keyPadButton00.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                keyPadButton01ActionPerformed(evt);
            }
        });

        keyPadButton09.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        keyPadButton09.setForeground(java.awt.Color.white);
        keyPadButton09.setText("9");
        keyPadButton09.setBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.white));
        keyPadButton09.setContentAreaFilled(false);
        keyPadButton09.setFocusable(false);
        keyPadButton09.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                keyPadButton01ActionPerformed(evt);
            }
        });

        keyPadButton06.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        keyPadButton06.setForeground(java.awt.Color.white);
        keyPadButton06.setText("6");
        keyPadButton06.setBorder(new javax.swing.border.LineBorder(java.awt.Color.white, 1, true));
        keyPadButton06.setContentAreaFilled(false);
        keyPadButton06.setFocusable(false);
        keyPadButton06.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                keyPadButton01ActionPerformed(evt);
            }
        });

        keyPadButton05.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        keyPadButton05.setForeground(java.awt.Color.white);
        keyPadButton05.setText("5");
        keyPadButton05.setBorder(new javax.swing.border.LineBorder(java.awt.Color.white, 1, true));
        keyPadButton05.setContentAreaFilled(false);
        keyPadButton05.setFocusable(false);
        keyPadButton05.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                keyPadButton01ActionPerformed(evt);
            }
        });

        keyPadButton01.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        keyPadButton01.setForeground(java.awt.Color.white);
        keyPadButton01.setText("1");
        keyPadButton01.setBorder(new javax.swing.border.LineBorder(java.awt.Color.white, 1, true));
        keyPadButton01.setContentAreaFilled(false);
        keyPadButton01.setFocusable(false);
        keyPadButton01.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                keyPadButton01ActionPerformed(evt);
            }
        });

        keyPadButton07.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        keyPadButton07.setForeground(java.awt.Color.white);
        keyPadButton07.setText("7");
        keyPadButton07.setBorder(new javax.swing.border.LineBorder(java.awt.Color.white, 1, true));
        keyPadButton07.setContentAreaFilled(false);
        keyPadButton07.setFocusable(false);
        keyPadButton07.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                keyPadButton01ActionPerformed(evt);
            }
        });

        keyPadButton08.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        keyPadButton08.setForeground(java.awt.Color.white);
        keyPadButton08.setText("8");
        keyPadButton08.setBorder(new javax.swing.border.LineBorder(java.awt.Color.white, 1, true));
        keyPadButton08.setContentAreaFilled(false);
        keyPadButton08.setFocusable(false);
        keyPadButton08.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                keyPadButton01ActionPerformed(evt);
            }
        });

        keyPadButton04.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        keyPadButton04.setForeground(java.awt.Color.white);
        keyPadButton04.setText("4");
        keyPadButton04.setBorder(new javax.swing.border.LineBorder(java.awt.Color.white, 1, true));
        keyPadButton04.setContentAreaFilled(false);
        keyPadButton04.setFocusable(false);
        keyPadButton04.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                keyPadButton01ActionPerformed(evt);
            }
        });

        keyPadButton02.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        keyPadButton02.setForeground(java.awt.Color.white);
        keyPadButton02.setText("2");
        keyPadButton02.setBorder(new javax.swing.border.LineBorder(java.awt.Color.white, 1, true));
        keyPadButton02.setContentAreaFilled(false);
        keyPadButton02.setFocusable(false);
        keyPadButton02.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                keyPadButton01ActionPerformed(evt);
            }
        });

        keyPadButton03.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        keyPadButton03.setForeground(java.awt.Color.white);
        keyPadButton03.setText("3");
        keyPadButton03.setBorder(new javax.swing.border.LineBorder(java.awt.Color.white, 1, true));
        keyPadButton03.setContentAreaFilled(false);
        keyPadButton03.setFocusable(false);
        keyPadButton03.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                keyPadButton01ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout keyPadInputPanelLayout = new javax.swing.GroupLayout(keyPadInputPanel);
        keyPadInputPanel.setLayout(keyPadInputPanelLayout);
        keyPadInputPanelLayout.setHorizontalGroup(
            keyPadInputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(keyPadInputPanelLayout.createSequentialGroup()
                .addComponent(keyPadInputLabel)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, keyPadInputPanelLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(keyPadInputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(keyPadInputPanelLayout.createSequentialGroup()
                        .addGroup(keyPadInputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(keyPadButton09, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(keyPadButton01, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(keyPadInputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(keyPadInputPanelLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(keyPadButton00, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(keyPadOKButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(10, 10, 10)
                                .addComponent(keyPadClearButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(keyPadInputPanelLayout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(keyPadButton02, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(keyPadButton03, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(keyPadInputPanelLayout.createSequentialGroup()
                        .addComponent(keyPadButton05, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(keyPadButton06, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(keyPadButton07, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(keyPadInputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(keyPadButton04, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(keyPadButton08, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))))
        );
        keyPadInputPanelLayout.setVerticalGroup(
            keyPadInputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(keyPadInputPanelLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(keyPadInputLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 13, Short.MAX_VALUE)
                .addGroup(keyPadInputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(keyPadButton01, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(keyPadButton02, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(keyPadButton04, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(keyPadButton03, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(keyPadInputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(keyPadButton05, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(keyPadButton06, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(keyPadButton07, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(keyPadButton08, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(keyPadInputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(keyPadClearButton, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(keyPadOKButton, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(keyPadButton00, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(keyPadButton09, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        spinCoaterRampPanel.setBackground(java.awt.Color.black);
        spinCoaterRampPanel.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), javax.swing.BorderFactory.createEmptyBorder(10, 20, 10, 20)));

        rampModeLabel.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        rampModeLabel.setForeground(java.awt.Color.white);
        rampModeLabel.setText("SPIN COATER / RAMP MODE # 1");

        rampBackButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        rampBackButton.setForeground(java.awt.Color.white);
        rampBackButton.setText("BACK");
        rampBackButton.setBorder(new javax.swing.border.LineBorder(java.awt.Color.white, 1, true));
        rampBackButton.setContentAreaFilled(false);
        rampBackButton.setFocusable(false);
        rampBackButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rampBackButtonActionPerformed(evt);
            }
        });

        rampStopButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        rampStopButton.setForeground(java.awt.Color.white);
        rampStopButton.setText("STOP");
        rampStopButton.setBorder(new javax.swing.border.LineBorder(java.awt.Color.white, 1, true));
        rampStopButton.setContentAreaFilled(false);
        rampStopButton.setFocusable(false);
        rampStopButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rampStopButtonActionPerformed(evt);
            }
        });

        rampUpButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        rampUpButton.setForeground(java.awt.Color.white);
        rampUpButton.setText("UP");
        rampUpButton.setBorder(new javax.swing.border.LineBorder(java.awt.Color.white, 1, true));
        rampUpButton.setContentAreaFilled(false);
        rampUpButton.setFocusPainted(false);
        rampUpButton.setMaximumSize(new java.awt.Dimension(75, 50));
        rampUpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rampUpButtonActionPerformed(evt);
            }
        });

        jPanel4.setBackground(java.awt.Color.black);
        jPanel4.setLayout(new java.awt.GridLayout(4, 3));

        rampMinLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        rampMinLabel.setForeground(java.awt.Color.white);
        rampMinLabel.setText("MIN");
        jPanel4.add(rampMinLabel);

        rampMinSpeedLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        rampMinSpeedLabel.setForeground(java.awt.Color.white);
        rampMinSpeedLabel.setText("500");
        jPanel4.add(rampMinSpeedLabel);

        rampMinTimeLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        rampMinTimeLabel.setForeground(java.awt.Color.white);
        rampMinTimeLabel.setText("10 s");
        jPanel4.add(rampMinTimeLabel);

        rampMaxLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        rampMaxLabel.setForeground(java.awt.Color.white);
        rampMaxLabel.setText("MAX");
        jPanel4.add(rampMaxLabel);

        rampMaxSpeedLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        rampMaxSpeedLabel.setForeground(java.awt.Color.white);
        rampMaxSpeedLabel.setText("3100");
        jPanel4.add(rampMaxSpeedLabel);

        rampMaxTimeLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        rampMaxTimeLabel.setForeground(java.awt.Color.white);
        rampMaxTimeLabel.setText("35 s");
        jPanel4.add(rampMaxTimeLabel);

        jLabel61.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel61.setForeground(java.awt.Color.white);
        jLabel61.setText("RPM");
        jPanel4.add(jLabel61);

        rampSpeedLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        rampSpeedLabel.setForeground(java.awt.Color.white);
        rampSpeedLabel.setText("0");
        jPanel4.add(rampSpeedLabel);

        jLabel29.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel29.setForeground(java.awt.Color.white);
        jPanel4.add(jLabel29);

        jLabel30.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel30.setForeground(java.awt.Color.white);
        jLabel30.setText("PWM");
        jPanel4.add(jLabel30);

        rampPWMLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        rampPWMLabel.setForeground(java.awt.Color.white);
        rampPWMLabel.setText("1000");
        jPanel4.add(rampPWMLabel);

        jLabel32.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel32.setForeground(java.awt.Color.white);
        jLabel32.setText("us");
        jPanel4.add(jLabel32);

        rampDownButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        rampDownButton.setForeground(java.awt.Color.white);
        rampDownButton.setText("DOWN");
        rampDownButton.setBorder(new javax.swing.border.LineBorder(java.awt.Color.white, 1, true));
        rampDownButton.setContentAreaFilled(false);
        rampDownButton.setFocusable(false);
        rampDownButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rampDownButtonActionPerformed(evt);
            }
        });

        rampStartButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        rampStartButton.setForeground(java.awt.Color.white);
        rampStartButton.setText("START");
        rampStartButton.setBorder(new javax.swing.border.LineBorder(java.awt.Color.white, 1, true));
        rampStartButton.setContentAreaFilled(false);
        rampStartButton.setFocusable(false);
        rampStartButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rampStartButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout spinCoaterRampPanelLayout = new javax.swing.GroupLayout(spinCoaterRampPanel);
        spinCoaterRampPanel.setLayout(spinCoaterRampPanelLayout);
        spinCoaterRampPanelLayout.setHorizontalGroup(
            spinCoaterRampPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(spinCoaterRampPanelLayout.createSequentialGroup()
                .addGroup(spinCoaterRampPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(rampModeLabel)
                    .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, 315, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(spinCoaterRampPanelLayout.createSequentialGroup()
                        .addComponent(rampStartButton, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(rampStopButton, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(spinCoaterRampPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(rampBackButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 107, Short.MAX_VALUE)
                    .addComponent(rampUpButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(rampDownButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 0, 0))
        );
        spinCoaterRampPanelLayout.setVerticalGroup(
            spinCoaterRampPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(spinCoaterRampPanelLayout.createSequentialGroup()
                .addGap(0, 1, Short.MAX_VALUE)
                .addComponent(rampModeLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 7, Short.MAX_VALUE)
                .addGroup(spinCoaterRampPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(spinCoaterRampPanelLayout.createSequentialGroup()
                        .addComponent(rampUpButton, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(rampDownButton, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(spinCoaterRampPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(spinCoaterRampPanelLayout.createSequentialGroup()
                        .addComponent(rampBackButton, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(1, 1, 1))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, spinCoaterRampPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(rampStartButton, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(rampStopButton, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE))))
        );

        setupPanel.setBackground(java.awt.Color.black);
        setupPanel.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), javax.swing.BorderFactory.createEmptyBorder(10, 20, 10, 20)));

        speedInputLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        speedInputLabel1.setForeground(java.awt.Color.white);
        speedInputLabel1.setText("SETUP");

        setupBackButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        setupBackButton.setForeground(java.awt.Color.white);
        setupBackButton.setText("BACK");
        setupBackButton.setBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.white));
        setupBackButton.setContentAreaFilled(false);
        setupBackButton.setFocusable(false);
        setupBackButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                spinCoaterBackButtonActionPerformed(evt);
            }
        });

        setupButton7.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        setupButton7.setForeground(java.awt.Color.white);
        setupButton7.setBorder(new javax.swing.border.LineBorder(java.awt.Color.white, 1, true));
        setupButton7.setContentAreaFilled(false);
        setupButton7.setFocusable(false);

        setupButton6.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        setupButton6.setForeground(java.awt.Color.white);
        setupButton6.setBorder(new javax.swing.border.LineBorder(java.awt.Color.white, 1, true));
        setupButton6.setContentAreaFilled(false);
        setupButton6.setFocusable(false);

        setupButton5.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        setupButton5.setForeground(java.awt.Color.white);
        setupButton5.setBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.white));
        setupButton5.setContentAreaFilled(false);
        setupButton5.setFocusable(false);

        setupRampButton2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        setupRampButton2.setForeground(java.awt.Color.white);
        setupRampButton2.setText("RAMP # 2");
        setupRampButton2.setBorder(new javax.swing.border.LineBorder(java.awt.Color.white, 1, true));
        setupRampButton2.setContentAreaFilled(false);
        setupRampButton2.setFocusable(false);
        setupRampButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setupRampButton1ActionPerformed(evt);
            }
        });

        setupRampButton1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        setupRampButton1.setForeground(java.awt.Color.white);
        setupRampButton1.setText("RAMP # 1");
        setupRampButton1.setBorder(new javax.swing.border.LineBorder(java.awt.Color.white, 1, true));
        setupRampButton1.setContentAreaFilled(false);
        setupRampButton1.setFocusable(false);
        setupRampButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setupRampButton1ActionPerformed(evt);
            }
        });

        setupMotorButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        setupMotorButton.setForeground(java.awt.Color.white);
        setupMotorButton.setText("MOTOR");
        setupMotorButton.setBorder(new javax.swing.border.LineBorder(java.awt.Color.white, 1, true));
        setupMotorButton.setContentAreaFilled(false);
        setupMotorButton.setFocusable(false);
        setupMotorButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setupMotorButtonActionPerformed(evt);
            }
        });

        setupRampButton3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        setupRampButton3.setForeground(java.awt.Color.white);
        setupRampButton3.setText("RAMP # 3");
        setupRampButton3.setBorder(new javax.swing.border.LineBorder(java.awt.Color.white, 1, true));
        setupRampButton3.setContentAreaFilled(false);
        setupRampButton3.setFocusable(false);
        setupRampButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setupRampButton1ActionPerformed(evt);
            }
        });

        setupRampButton4.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        setupRampButton4.setForeground(java.awt.Color.white);
        setupRampButton4.setText("RAMP # 4");
        setupRampButton4.setBorder(new javax.swing.border.LineBorder(java.awt.Color.white, 1, true));
        setupRampButton4.setContentAreaFilled(false);
        setupRampButton4.setFocusable(false);
        setupRampButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setupRampButton1ActionPerformed(evt);
            }
        });

        setupStepperButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        setupStepperButton.setForeground(java.awt.Color.white);
        setupStepperButton.setText("STEPPER");
        setupStepperButton.setBorder(new javax.swing.border.LineBorder(java.awt.Color.white, 1, true));
        setupStepperButton.setContentAreaFilled(false);
        setupStepperButton.setFocusable(false);
        setupStepperButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setupStepperButtonActionPerformed(evt);
            }
        });

        setupStartModeButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        setupStartModeButton.setForeground(java.awt.Color.white);
        setupStartModeButton.setText("START MODE");
        setupStartModeButton.setBorder(new javax.swing.border.LineBorder(java.awt.Color.white, 1, true));
        setupStartModeButton.setContentAreaFilled(false);
        setupStartModeButton.setFocusable(false);
        setupStartModeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setupStartModeButtonActionPerformed(evt);
            }
        });

        setupDipCoatButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        setupDipCoatButton.setForeground(java.awt.Color.white);
        setupDipCoatButton.setText("DIP COAT");
        setupDipCoatButton.setBorder(new javax.swing.border.LineBorder(java.awt.Color.white, 1, true));
        setupDipCoatButton.setContentAreaFilled(false);
        setupDipCoatButton.setFocusable(false);
        setupDipCoatButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setupDipCoatButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout setupPanelLayout = new javax.swing.GroupLayout(setupPanel);
        setupPanel.setLayout(setupPanelLayout);
        setupPanelLayout.setHorizontalGroup(
            setupPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(setupPanelLayout.createSequentialGroup()
                .addComponent(speedInputLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, setupPanelLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(setupPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(setupPanelLayout.createSequentialGroup()
                        .addGroup(setupPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(setupButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(setupMotorButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(setupPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(setupPanelLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(setupButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(setupButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(10, 10, 10)
                                .addComponent(setupBackButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(setupPanelLayout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(setupStartModeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(setupDipCoatButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(setupPanelLayout.createSequentialGroup()
                        .addComponent(setupRampButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(setupRampButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(setupRampButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(setupPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(setupStepperButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(setupRampButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))))
        );
        setupPanelLayout.setVerticalGroup(
            setupPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(setupPanelLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(speedInputLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 13, Short.MAX_VALUE)
                .addGroup(setupPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(setupMotorButton, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(setupStartModeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(setupStepperButton, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(setupDipCoatButton, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(setupPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(setupRampButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(setupRampButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(setupRampButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(setupRampButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(setupPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(setupBackButton, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(setupButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(setupButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(setupButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        dipCoaterPanel.setBackground(java.awt.Color.black);
        dipCoaterPanel.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), javax.swing.BorderFactory.createEmptyBorder(10, 20, 10, 20)));

        jLabel26.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel26.setForeground(java.awt.Color.white);
        jLabel26.setText("DIP COATER");

        backButton3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        backButton3.setForeground(java.awt.Color.white);
        backButton3.setText("BACK");
        backButton3.setBorder(new javax.swing.border.LineBorder(java.awt.Color.white, 1, true));
        backButton3.setContentAreaFilled(false);
        backButton3.setFocusable(false);
        backButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                spinCoaterBackButtonActionPerformed(evt);
            }
        });

        jLabel39.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel39.setForeground(java.awt.Color.white);
        jLabel39.setText("No Dip Coater Device Detected ...");

        javax.swing.GroupLayout dipCoaterPanelLayout = new javax.swing.GroupLayout(dipCoaterPanel);
        dipCoaterPanel.setLayout(dipCoaterPanelLayout);
        dipCoaterPanelLayout.setHorizontalGroup(
            dipCoaterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dipCoaterPanelLayout.createSequentialGroup()
                .addComponent(jLabel26)
                .addGap(232, 232, 232)
                .addComponent(backButton3, javax.swing.GroupLayout.DEFAULT_SIZE, 107, Short.MAX_VALUE))
            .addGroup(dipCoaterPanelLayout.createSequentialGroup()
                .addComponent(jLabel39)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        dipCoaterPanelLayout.setVerticalGroup(
            dipCoaterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dipCoaterPanelLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jLabel26)
                .addGap(18, 18, 18)
                .addComponent(jLabel39)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 147, Short.MAX_VALUE)
                .addComponent(backButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(1, 1, 1))
        );

        aboutPanel.setBackground(java.awt.Color.black);
        aboutPanel.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), javax.swing.BorderFactory.createEmptyBorder(10, 20, 10, 20)));

        jLabel27.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel27.setForeground(java.awt.Color.white);
        jLabel27.setText("ABOUT");

        backButton4.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        backButton4.setForeground(java.awt.Color.white);
        backButton4.setText("BACK");
        backButton4.setBorder(new javax.swing.border.LineBorder(java.awt.Color.white, 1, true));
        backButton4.setContentAreaFilled(false);
        backButton4.setFocusable(false);
        backButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                spinCoaterBackButtonActionPerformed(evt);
            }
        });

        jPanel5.setBackground(java.awt.Color.black);
        jPanel5.setLayout(new java.awt.GridLayout(5, 1));

        jLabel42.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel42.setForeground(java.awt.Color.white);
        jLabel42.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel42.setText("Precision Digital Controller");
        jPanel5.add(jLabel42);

        jLabel28.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel28.setForeground(java.awt.Color.white);
        jLabel28.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel28.setText("Touch Edition");
        jPanel5.add(jLabel28);

        jLabel43.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel43.setForeground(java.awt.Color.white);
        jLabel43.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel43.setText("Version 1.0");
        jPanel5.add(jLabel43);

        jLabel44.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel44.setForeground(java.awt.Color.white);
        jLabel44.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel44.setText("Copyright 2017");
        jPanel5.add(jLabel44);

        jLabel41.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel41.setForeground(java.awt.Color.white);
        jLabel41.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel41.setText("Actusense INC.");
        jPanel5.add(jLabel41);

        javax.swing.GroupLayout aboutPanelLayout = new javax.swing.GroupLayout(aboutPanel);
        aboutPanel.setLayout(aboutPanelLayout);
        aboutPanelLayout.setHorizontalGroup(
            aboutPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(aboutPanelLayout.createSequentialGroup()
                .addGroup(aboutPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel27)
                    .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, 315, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(backButton4, javax.swing.GroupLayout.DEFAULT_SIZE, 107, Short.MAX_VALUE)
                .addGap(0, 0, 0))
        );
        aboutPanelLayout.setVerticalGroup(
            aboutPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(aboutPanelLayout.createSequentialGroup()
                .addGap(0, 1, Short.MAX_VALUE)
                .addComponent(jLabel27)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 7, Short.MAX_VALUE)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(backButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(1, 1, 1))
        );

        setupMotorPanel.setBackground(java.awt.Color.black);
        setupMotorPanel.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), javax.swing.BorderFactory.createEmptyBorder(10, 20, 10, 20)));

        setupMotorLabel.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        setupMotorLabel.setForeground(java.awt.Color.white);
        setupMotorLabel.setText("SETUP / MOTOR");

        backSetupButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        backSetupButton.setForeground(java.awt.Color.white);
        backSetupButton.setText("BACK");
        backSetupButton.setBorder(new javax.swing.border.LineBorder(java.awt.Color.white, 1, true));
        backSetupButton.setContentAreaFilled(false);
        backSetupButton.setFocusable(false);
        backSetupButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backSetupButtonActionPerformed(evt);
            }
        });

        motorSetupRightButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        motorSetupRightButton.setForeground(java.awt.Color.white);
        motorSetupRightButton.setText(">");
        motorSetupRightButton.setBorder(new javax.swing.border.LineBorder(java.awt.Color.white, 1, true));
        motorSetupRightButton.setContentAreaFilled(false);
        motorSetupRightButton.setFocusable(false);
        motorSetupRightButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                motorSetupRightButtonActionPerformed(evt);
            }
        });

        motorSetupUpButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        motorSetupUpButton.setForeground(java.awt.Color.white);
        motorSetupUpButton.setText("UP");
        motorSetupUpButton.setBorder(new javax.swing.border.LineBorder(java.awt.Color.white, 1, true));
        motorSetupUpButton.setContentAreaFilled(false);
        motorSetupUpButton.setFocusPainted(false);
        motorSetupUpButton.setMaximumSize(new java.awt.Dimension(75, 50));
        motorSetupUpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                motorSetupUpButtonActionPerformed(evt);
            }
        });

        jPanel7.setBackground(java.awt.Color.black);
        jPanel7.setLayout(new java.awt.GridLayout(4, 3));

        motorSetupNameLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        motorSetupNameLabel.setForeground(java.awt.Color.white);
        motorSetupNameLabel.setText("Motor");
        jPanel7.add(motorSetupNameLabel);

        motorSetupNameValueLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        motorSetupNameValueLabel.setForeground(java.awt.Color.white);
        motorSetupNameValueLabel.setText("Park 450 @ 9V");
        jPanel7.add(motorSetupNameValueLabel);

        motorSetupPoleLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        motorSetupPoleLabel.setForeground(java.awt.Color.white);
        motorSetupPoleLabel.setText("Pole #");
        jPanel7.add(motorSetupPoleLabel);

        motorSetupPoleValueLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        motorSetupPoleValueLabel.setForeground(java.awt.Color.white);
        motorSetupPoleValueLabel.setText("7");
        jPanel7.add(motorSetupPoleValueLabel);

        motorSetupALabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        motorSetupALabel.setForeground(java.awt.Color.white);
        motorSetupALabel.setText("a=100");
        jPanel7.add(motorSetupALabel);

        motorSetupBLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        motorSetupBLabel.setForeground(java.awt.Color.white);
        motorSetupBLabel.setText("b=100");
        jPanel7.add(motorSetupBLabel);

        motorSetupCLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        motorSetupCLabel.setForeground(java.awt.Color.white);
        motorSetupCLabel.setText("c=0");
        jPanel7.add(motorSetupCLabel);

        motorSetupDLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        motorSetupDLabel.setForeground(java.awt.Color.white);
        motorSetupDLabel.setText("d=0");
        jPanel7.add(motorSetupDLabel);

        motorSetupDownButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        motorSetupDownButton.setForeground(java.awt.Color.white);
        motorSetupDownButton.setText("DOWN");
        motorSetupDownButton.setBorder(new javax.swing.border.LineBorder(java.awt.Color.white, 1, true));
        motorSetupDownButton.setContentAreaFilled(false);
        motorSetupDownButton.setFocusable(false);
        motorSetupDownButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                motorSetupDownButtonActionPerformed(evt);
            }
        });

        motorSetupLeftButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        motorSetupLeftButton.setForeground(java.awt.Color.white);
        motorSetupLeftButton.setText("<");
        motorSetupLeftButton.setBorder(new javax.swing.border.LineBorder(java.awt.Color.white, 1, true));
        motorSetupLeftButton.setContentAreaFilled(false);
        motorSetupLeftButton.setFocusable(false);
        motorSetupLeftButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                motorSetupLeftButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout setupMotorPanelLayout = new javax.swing.GroupLayout(setupMotorPanel);
        setupMotorPanel.setLayout(setupMotorPanelLayout);
        setupMotorPanelLayout.setHorizontalGroup(
            setupMotorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(setupMotorPanelLayout.createSequentialGroup()
                .addGroup(setupMotorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(setupMotorLabel)
                    .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, 315, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(setupMotorPanelLayout.createSequentialGroup()
                        .addComponent(motorSetupLeftButton, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(motorSetupRightButton, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(setupMotorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(backSetupButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 107, Short.MAX_VALUE)
                    .addComponent(motorSetupUpButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(motorSetupDownButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 0, 0))
        );
        setupMotorPanelLayout.setVerticalGroup(
            setupMotorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(setupMotorPanelLayout.createSequentialGroup()
                .addGap(0, 1, Short.MAX_VALUE)
                .addComponent(setupMotorLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 7, Short.MAX_VALUE)
                .addGroup(setupMotorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(setupMotorPanelLayout.createSequentialGroup()
                        .addComponent(motorSetupUpButton, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(motorSetupDownButton, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(setupMotorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(setupMotorPanelLayout.createSequentialGroup()
                        .addComponent(backSetupButton, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(1, 1, 1))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, setupMotorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(motorSetupLeftButton, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(motorSetupRightButton, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE))))
        );

        setupStartModePanel.setBackground(java.awt.Color.black);
        setupStartModePanel.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), javax.swing.BorderFactory.createEmptyBorder(10, 20, 10, 20)));

        jLabel56.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel56.setForeground(java.awt.Color.white);
        jLabel56.setText("SETUP / START MODE");

        setupStartModeBackButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        setupStartModeBackButton.setForeground(java.awt.Color.white);
        setupStartModeBackButton.setText("BACK");
        setupStartModeBackButton.setBorder(new javax.swing.border.LineBorder(java.awt.Color.white, 1, true));
        setupStartModeBackButton.setContentAreaFilled(false);
        setupStartModeBackButton.setFocusable(false);
        setupStartModeBackButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setupStartModeBackButtonActionPerformed(evt);
            }
        });

        setupStartModeUpButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        setupStartModeUpButton.setForeground(java.awt.Color.white);
        setupStartModeUpButton.setText("UP");
        setupStartModeUpButton.setBorder(new javax.swing.border.LineBorder(java.awt.Color.white, 1, true));
        setupStartModeUpButton.setContentAreaFilled(false);
        setupStartModeUpButton.setFocusPainted(false);
        setupStartModeUpButton.setMaximumSize(new java.awt.Dimension(75, 50));
        setupStartModeUpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setupStartModeUpButtonActionPerformed(evt);
            }
        });

        jPanel8.setBackground(java.awt.Color.black);
        jPanel8.setLayout(new java.awt.GridLayout(4, 1));

        setupStartModeNoneLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        setupStartModeNoneLabel.setForeground(java.awt.Color.white);
        setupStartModeNoneLabel.setText("NONE");
        jPanel8.add(setupStartModeNoneLabel);

        setupStartModeSCMLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        setupStartModeSCMLabel.setForeground(java.awt.Color.white);
        setupStartModeSCMLabel.setText("SPIN COATER (MANUAL)");
        jPanel8.add(setupStartModeSCMLabel);

        setupStartModeSCRLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        setupStartModeSCRLabel.setForeground(java.awt.Color.white);
        setupStartModeSCRLabel.setText("SPIN COATER (RAMP)");
        jPanel8.add(setupStartModeSCRLabel);

        setupStartModeDCLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        setupStartModeDCLabel.setForeground(java.awt.Color.white);
        setupStartModeDCLabel.setText("DIP COATER");
        jPanel8.add(setupStartModeDCLabel);

        setupStartModeDownButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        setupStartModeDownButton.setForeground(java.awt.Color.white);
        setupStartModeDownButton.setText("DOWN");
        setupStartModeDownButton.setBorder(new javax.swing.border.LineBorder(java.awt.Color.white, 1, true));
        setupStartModeDownButton.setContentAreaFilled(false);
        setupStartModeDownButton.setFocusable(false);
        setupStartModeDownButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setupStartModeDownButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout setupStartModePanelLayout = new javax.swing.GroupLayout(setupStartModePanel);
        setupStartModePanel.setLayout(setupStartModePanelLayout);
        setupStartModePanelLayout.setHorizontalGroup(
            setupStartModePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(setupStartModePanelLayout.createSequentialGroup()
                .addGroup(setupStartModePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel56)
                    .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, 315, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(setupStartModePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(setupStartModeBackButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 107, Short.MAX_VALUE)
                    .addComponent(setupStartModeUpButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(setupStartModeDownButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 0, 0))
        );
        setupStartModePanelLayout.setVerticalGroup(
            setupStartModePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(setupStartModePanelLayout.createSequentialGroup()
                .addGap(0, 1, Short.MAX_VALUE)
                .addComponent(jLabel56)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 7, Short.MAX_VALUE)
                .addGroup(setupStartModePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(setupStartModePanelLayout.createSequentialGroup()
                        .addComponent(setupStartModeUpButton, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(setupStartModeDownButton, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(setupStartModeBackButton, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(1, 1, 1))
        );

        setupStepperPanel.setBackground(java.awt.Color.black);
        setupStepperPanel.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), javax.swing.BorderFactory.createEmptyBorder(10, 20, 10, 20)));

        jLabel64.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel64.setForeground(java.awt.Color.white);
        jLabel64.setText("SETUP / STEPPER");

        stepperSetupBackButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        stepperSetupBackButton.setForeground(java.awt.Color.white);
        stepperSetupBackButton.setText("BACK");
        stepperSetupBackButton.setBorder(new javax.swing.border.LineBorder(java.awt.Color.white, 1, true));
        stepperSetupBackButton.setContentAreaFilled(false);
        stepperSetupBackButton.setFocusable(false);
        stepperSetupBackButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stepperSetupBackButtonActionPerformed(evt);
            }
        });

        stepperSetupRightButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        stepperSetupRightButton.setForeground(java.awt.Color.white);
        stepperSetupRightButton.setText(">");
        stepperSetupRightButton.setBorder(new javax.swing.border.LineBorder(java.awt.Color.white, 1, true));
        stepperSetupRightButton.setContentAreaFilled(false);
        stepperSetupRightButton.setFocusable(false);
        stepperSetupRightButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stepperSetupRightButtonActionPerformed(evt);
            }
        });

        stepperSetupUpButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        stepperSetupUpButton.setForeground(java.awt.Color.white);
        stepperSetupUpButton.setText("UP");
        stepperSetupUpButton.setBorder(new javax.swing.border.LineBorder(java.awt.Color.white, 1, true));
        stepperSetupUpButton.setContentAreaFilled(false);
        stepperSetupUpButton.setFocusPainted(false);
        stepperSetupUpButton.setMaximumSize(new java.awt.Dimension(75, 50));
        stepperSetupUpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stepperSetupUpButtonActionPerformed(evt);
            }
        });

        jPanel9.setBackground(java.awt.Color.black);
        jPanel9.setLayout(new java.awt.GridLayout(5, 3));

        stepperSetupActiveLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        stepperSetupActiveLabel.setForeground(java.awt.Color.white);
        stepperSetupActiveLabel.setText("ACTIVE");
        jPanel9.add(stepperSetupActiveLabel);

        stepperSetupActiveValueLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        stepperSetupActiveValueLabel.setForeground(java.awt.Color.white);
        stepperSetupActiveValueLabel.setText("NO/YES");
        jPanel9.add(stepperSetupActiveValueLabel);

        stepperSetupSPRLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        stepperSetupSPRLabel.setForeground(java.awt.Color.white);
        stepperSetupSPRLabel.setText("STEPS PER REV");
        jPanel9.add(stepperSetupSPRLabel);

        stepperSetupSPRValueLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        stepperSetupSPRValueLabel.setForeground(java.awt.Color.white);
        stepperSetupSPRValueLabel.setText("200");
        jPanel9.add(stepperSetupSPRValueLabel);

        stepperSetupRPMLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        stepperSetupRPMLabel.setForeground(java.awt.Color.white);
        stepperSetupRPMLabel.setText("MAX RPM");
        jPanel9.add(stepperSetupRPMLabel);

        stepperSetupRPMValueLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        stepperSetupRPMValueLabel.setForeground(java.awt.Color.white);
        stepperSetupRPMValueLabel.setText("3000");
        jPanel9.add(stepperSetupRPMValueLabel);

        stepperSetupDirectionLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        stepperSetupDirectionLabel.setForeground(java.awt.Color.white);
        stepperSetupDirectionLabel.setText("DIRECTION");
        jPanel9.add(stepperSetupDirectionLabel);

        stepperSetupDirectionValueLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        stepperSetupDirectionValueLabel.setForeground(java.awt.Color.white);
        stepperSetupDirectionValueLabel.setText("CW/CCW");
        jPanel9.add(stepperSetupDirectionValueLabel);

        stepperSetupExcitationLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        stepperSetupExcitationLabel.setForeground(java.awt.Color.white);
        stepperSetupExcitationLabel.setText("EXCITATION");
        jPanel9.add(stepperSetupExcitationLabel);

        stepperSetupExcitationValueLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        stepperSetupExcitationValueLabel.setForeground(java.awt.Color.white);
        stepperSetupExcitationValueLabel.setText("HALF STEP");
        jPanel9.add(stepperSetupExcitationValueLabel);

        stepperSetupDownButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        stepperSetupDownButton.setForeground(java.awt.Color.white);
        stepperSetupDownButton.setText("DOWN");
        stepperSetupDownButton.setBorder(new javax.swing.border.LineBorder(java.awt.Color.white, 1, true));
        stepperSetupDownButton.setContentAreaFilled(false);
        stepperSetupDownButton.setFocusable(false);
        stepperSetupDownButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stepperSetupDownButtonActionPerformed(evt);
            }
        });

        stepperSetupLeftButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        stepperSetupLeftButton.setForeground(java.awt.Color.white);
        stepperSetupLeftButton.setText("<");
        stepperSetupLeftButton.setBorder(new javax.swing.border.LineBorder(java.awt.Color.white, 1, true));
        stepperSetupLeftButton.setContentAreaFilled(false);
        stepperSetupLeftButton.setFocusable(false);
        stepperSetupLeftButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stepperSetupLeftButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout setupStepperPanelLayout = new javax.swing.GroupLayout(setupStepperPanel);
        setupStepperPanel.setLayout(setupStepperPanelLayout);
        setupStepperPanelLayout.setHorizontalGroup(
            setupStepperPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(setupStepperPanelLayout.createSequentialGroup()
                .addGroup(setupStepperPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel64)
                    .addComponent(jPanel9, javax.swing.GroupLayout.PREFERRED_SIZE, 315, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(setupStepperPanelLayout.createSequentialGroup()
                        .addComponent(stepperSetupLeftButton, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(stepperSetupRightButton, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(setupStepperPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(stepperSetupBackButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 107, Short.MAX_VALUE)
                    .addComponent(stepperSetupUpButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(stepperSetupDownButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 0, 0))
        );
        setupStepperPanelLayout.setVerticalGroup(
            setupStepperPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(setupStepperPanelLayout.createSequentialGroup()
                .addGap(0, 1, Short.MAX_VALUE)
                .addComponent(jLabel64)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 7, Short.MAX_VALUE)
                .addGroup(setupStepperPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(setupStepperPanelLayout.createSequentialGroup()
                        .addComponent(stepperSetupUpButton, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(stepperSetupDownButton, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel9, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(setupStepperPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(setupStepperPanelLayout.createSequentialGroup()
                        .addComponent(stepperSetupBackButton, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(1, 1, 1))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, setupStepperPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(stepperSetupLeftButton, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(stepperSetupRightButton, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE))))
        );

        setupRampModePanel.setBackground(java.awt.Color.black);
        setupRampModePanel.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), javax.swing.BorderFactory.createEmptyBorder(10, 20, 10, 20)));

        rampSetupModeLabel.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        rampSetupModeLabel.setForeground(java.awt.Color.white);
        rampSetupModeLabel.setText("SETUP / RAMP MODE X");

        rampSetupBackButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        rampSetupBackButton.setForeground(java.awt.Color.white);
        rampSetupBackButton.setText("BACK");
        rampSetupBackButton.setBorder(new javax.swing.border.LineBorder(java.awt.Color.white, 1, true));
        rampSetupBackButton.setContentAreaFilled(false);
        rampSetupBackButton.setFocusable(false);
        rampSetupBackButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rampSetupBackButtonActionPerformed(evt);
            }
        });

        rampSetupRightButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        rampSetupRightButton.setForeground(java.awt.Color.white);
        rampSetupRightButton.setText(">");
        rampSetupRightButton.setBorder(new javax.swing.border.LineBorder(java.awt.Color.white, 1, true));
        rampSetupRightButton.setContentAreaFilled(false);
        rampSetupRightButton.setFocusable(false);
        rampSetupRightButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rampSetupRightButtonActionPerformed(evt);
            }
        });

        rampSetupUpButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        rampSetupUpButton.setForeground(java.awt.Color.white);
        rampSetupUpButton.setText("UP");
        rampSetupUpButton.setBorder(new javax.swing.border.LineBorder(java.awt.Color.white, 1, true));
        rampSetupUpButton.setContentAreaFilled(false);
        rampSetupUpButton.setFocusPainted(false);
        rampSetupUpButton.setMaximumSize(new java.awt.Dimension(75, 50));
        rampSetupUpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rampSetupUpButtonActionPerformed(evt);
            }
        });

        jPanel10.setBackground(java.awt.Color.black);
        jPanel10.setLayout(new java.awt.GridLayout(6, 3));

        rampSetupMinRPMLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        rampSetupMinRPMLabel.setForeground(java.awt.Color.white);
        rampSetupMinRPMLabel.setText("MIN RPM");
        jPanel10.add(rampSetupMinRPMLabel);

        rampSetupMinRPMValueLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        rampSetupMinRPMValueLabel.setForeground(java.awt.Color.white);
        rampSetupMinRPMValueLabel.setText("500");
        jPanel10.add(rampSetupMinRPMValueLabel);

        rampSetupMinTimeLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        rampSetupMinTimeLabel.setForeground(java.awt.Color.white);
        rampSetupMinTimeLabel.setText("MIN TIME");
        jPanel10.add(rampSetupMinTimeLabel);

        rampSetupMinTimeValueLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        rampSetupMinTimeValueLabel.setForeground(java.awt.Color.white);
        rampSetupMinTimeValueLabel.setText("10");
        jPanel10.add(rampSetupMinTimeValueLabel);

        rampSetupMaxRPMLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        rampSetupMaxRPMLabel.setForeground(java.awt.Color.white);
        rampSetupMaxRPMLabel.setText("MAX RPM");
        jPanel10.add(rampSetupMaxRPMLabel);

        rampSetupMaxRPMValueLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        rampSetupMaxRPMValueLabel.setForeground(java.awt.Color.white);
        rampSetupMaxRPMValueLabel.setText("3100");
        jPanel10.add(rampSetupMaxRPMValueLabel);

        rampSetupMaxTimeLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        rampSetupMaxTimeLabel.setForeground(java.awt.Color.white);
        rampSetupMaxTimeLabel.setText("MAX TIME");
        jPanel10.add(rampSetupMaxTimeLabel);

        rampSetupMaxTimeValueLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        rampSetupMaxTimeValueLabel.setForeground(java.awt.Color.white);
        rampSetupMaxTimeValueLabel.setText("35");
        jPanel10.add(rampSetupMaxTimeValueLabel);

        jLabel84.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel84.setForeground(java.awt.Color.white);
        jLabel84.setText("SPEED (RPM)");
        jPanel10.add(jLabel84);

        rampSetupSpeedLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        rampSetupSpeedLabel.setForeground(java.awt.Color.white);
        rampSetupSpeedLabel.setText("0");
        jPanel10.add(rampSetupSpeedLabel);

        jLabel86.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel86.setForeground(java.awt.Color.white);
        jLabel86.setText("PWM");
        jPanel10.add(jLabel86);

        rampSetupPWMLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        rampSetupPWMLabel.setForeground(java.awt.Color.white);
        rampSetupPWMLabel.setText("1000");
        jPanel10.add(rampSetupPWMLabel);

        rampSetupDownButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        rampSetupDownButton.setForeground(java.awt.Color.white);
        rampSetupDownButton.setText("DOWN");
        rampSetupDownButton.setBorder(new javax.swing.border.LineBorder(java.awt.Color.white, 1, true));
        rampSetupDownButton.setContentAreaFilled(false);
        rampSetupDownButton.setFocusable(false);
        rampSetupDownButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rampSetupDownButtonActionPerformed(evt);
            }
        });

        rampSetupLeftButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        rampSetupLeftButton.setForeground(java.awt.Color.white);
        rampSetupLeftButton.setText("<");
        rampSetupLeftButton.setBorder(new javax.swing.border.LineBorder(java.awt.Color.white, 1, true));
        rampSetupLeftButton.setContentAreaFilled(false);
        rampSetupLeftButton.setFocusable(false);
        rampSetupLeftButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rampSetupLeftButtonActionPerformed(evt);
            }
        });

        rampSetupIncrementButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        rampSetupIncrementButton.setForeground(java.awt.Color.white);
        rampSetupIncrementButton.setText("INC * 2");
        rampSetupIncrementButton.setBorder(new javax.swing.border.LineBorder(java.awt.Color.white, 1, true));
        rampSetupIncrementButton.setContentAreaFilled(false);
        rampSetupIncrementButton.setFocusable(false);
        rampSetupIncrementButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rampSetupIncrementButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout setupRampModePanelLayout = new javax.swing.GroupLayout(setupRampModePanel);
        setupRampModePanel.setLayout(setupRampModePanelLayout);
        setupRampModePanelLayout.setHorizontalGroup(
            setupRampModePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(setupRampModePanelLayout.createSequentialGroup()
                .addGroup(setupRampModePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(setupRampModePanelLayout.createSequentialGroup()
                        .addGroup(setupRampModePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(rampSetupModeLabel)
                            .addComponent(jPanel10, javax.swing.GroupLayout.PREFERRED_SIZE, 315, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(13, 13, 13))
                    .addGroup(setupRampModePanelLayout.createSequentialGroup()
                        .addComponent(rampSetupIncrementButton, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(rampSetupLeftButton, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(rampSetupRightButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                .addGroup(setupRampModePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(rampSetupBackButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(rampSetupUpButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(rampSetupDownButton, javax.swing.GroupLayout.DEFAULT_SIZE, 98, Short.MAX_VALUE))
                .addGap(0, 0, 0))
        );
        setupRampModePanelLayout.setVerticalGroup(
            setupRampModePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(setupRampModePanelLayout.createSequentialGroup()
                .addGap(0, 1, Short.MAX_VALUE)
                .addComponent(rampSetupModeLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 7, Short.MAX_VALUE)
                .addGroup(setupRampModePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(setupRampModePanelLayout.createSequentialGroup()
                        .addComponent(rampSetupUpButton, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(rampSetupDownButton, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel10, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(setupRampModePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(setupRampModePanelLayout.createSequentialGroup()
                        .addGroup(setupRampModePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(rampSetupBackButton, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(rampSetupRightButton, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(1, 1, 1))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, setupRampModePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(rampSetupLeftButton, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(rampSetupIncrementButton, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE))))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("PDC Touch Simulator v 1.0 (04/26/2017)");

        closeButton.setText("Close");
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });

        jTabbedPane1.setPreferredSize(new java.awt.Dimension(550, 500));

        jPanel1.setBackground(java.awt.Color.black);
        jPanel1.setLayout(new java.awt.GridLayout(3, 1));

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        jLabel3.setForeground(java.awt.Color.white);
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("ACTUSENSE");
        jPanel1.add(jLabel3);

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        jLabel4.setForeground(java.awt.Color.white);
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("INC.");
        jPanel1.add(jLabel4);

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        jLabel5.setForeground(java.awt.Color.white);
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("PDC TOUCH 1.0");
        jPanel1.add(jLabel5);

        jTabbedPane1.addTab("Splash Screen", jPanel1);

        screenPanel.setLayout(new java.awt.BorderLayout());
        jTabbedPane1.addTab("Main Screen", screenPanel);

        consoleTextArea.setColumns(20);
        consoleTextArea.setRows(5);
        jScrollPane1.setViewportView(consoleTextArea);

        clearButton.setText("Clear");
        clearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(clearButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(closeButton))
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 307, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 463, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 334, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(closeButton)
                    .addComponent(clearButton)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
        setVisible(false);
        System.exit(0);
    }//GEN-LAST:event_closeButtonActionPerformed

    private void spinCoaterRampButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_spinCoaterRampButtonActionPerformed
        updateRampLabels(1);
        showPanel(spinCoaterRampPanel);
        print("Display Spin Coater Ramp Mode Screen ...");
    }//GEN-LAST:event_spinCoaterRampButtonActionPerformed
    
    /**
     * Update the ramp labels
     * format is [min rpm, min time, min pwm, max rpm, max time, max pwm]
     * @param rampMode 
     */
    private void updateRampLabels(int mode) {
        pdcDevice.setRampModeData(mode);
        
        rampModeLabel.setText("SPIN COATER / RAMP MODE # "  + mode);
        rampMinSpeedLabel.setText("" + pdcDevice.rampMode[0]);
        rampMinTimeLabel.setText("" + pdcDevice.rampMode[1]);
        rampMaxSpeedLabel.setText("" + pdcDevice.rampMode[3]);
        rampMaxTimeLabel.setText("" + pdcDevice.rampMode[4]);
    }
    
    private void dipCoaterButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dipCoaterButtonActionPerformed
        showPanel(dipCoaterPanel);
        print("Display Dip Coater Manual Mode Screen ...");
    }//GEN-LAST:event_dipCoaterButtonActionPerformed

    private void spinCoaterButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_spinCoaterButtonActionPerformed
        pwmValue = 1000;
        spinCoaterPWMLabel.setText("" + pwmValue);
        spinCoaterSpeedLabel.setText("0");
        
        lastPanel = spinCoaterPanel;
        showPanel(spinCoaterPanel);
        print("Display Spin Coater Manual Mode Screen ...");
    }//GEN-LAST:event_spinCoaterButtonActionPerformed

    private void spinCoaterGoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_spinCoaterGoButtonActionPerformed
        // start the motor moving
        if(!moving) {
            moving = true;
            spinCoaterGoButton.setText("PAUSE");
            print("Spinning Motor @ " + pwmValue);
            spinCoaterTimer.start();
        } else {
            moving = false;
            spinCoaterGoButton.setText("GO");
            print("Motor Paused @ " + pwmValue);
        }
    }//GEN-LAST:event_spinCoaterGoButtonActionPerformed

    private void spinCoaterBackButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_spinCoaterBackButtonActionPerformed
        pwmValue = 1000;
        moving = false;
        showMainPanel();
    }//GEN-LAST:event_spinCoaterBackButtonActionPerformed

    private void keyPadClearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_keyPadClearButtonActionPerformed
        clearCount++;
        if(clearCount == 1) {    
            keypadValue = "";
            keyPadInputLabel.setText("SPEED INPUT -> RPM: ? / PWM: ? us");
        } else {
            clearCount = 0;
            keypadValue = "";
            showPanel(lastPanel);
        }
        
        print("Keypad Button pressed " + clearCount);
    }//GEN-LAST:event_keyPadClearButtonActionPerformed
    
    private void spinCoaterInputButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_spinCoaterInputButtonActionPerformed
        keyPadInputLabel.setText("SPEED INPUT -> RPM: ? / PWM: ? us00");
        showPanel(keyPadInputPanel);
    }//GEN-LAST:event_spinCoaterInputButtonActionPerformed

    /**
     * Set the global increment value
     * @param evt 
     */
    private void spinCoaterIncrementButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_spinCoaterIncrementButtonActionPerformed
        speedIncrementIndex++;
        if(speedIncrementIndex >= SPEED_INCREMENT.length) {
            speedIncrementIndex = 0;
        }
        
        int speedIncrement = SPEED_INCREMENT[speedIncrementIndex];
        spinCoaterIncrementButton.setText("INC * " + speedIncrement);
        
        print("Setting speed (PWM) increment to " + speedIncrement);
    }//GEN-LAST:event_spinCoaterIncrementButtonActionPerformed

    private void spinCoaterLeftButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_spinCoaterLeftButtonActionPerformed
        pwmValue -= SPEED_INCREMENT[speedIncrementIndex];
        if(pwmValue < 1000){
            pwmValue = 1000;
        }
        
        spinCoaterPWMLabel.setText("" + pwmValue);
        print("Decreasing speed (PWM) to " + pwmValue);
    }//GEN-LAST:event_spinCoaterLeftButtonActionPerformed

    private void spinCoaterRightButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_spinCoaterRightButtonActionPerformed
        pwmValue += SPEED_INCREMENT[speedIncrementIndex];
        if(pwmValue > 2000){
            pwmValue = 2000;
        }
        
        spinCoaterPWMLabel.setText("" + pwmValue);
        print("Increasing speed (PWM) to " + pwmValue);
    }//GEN-LAST:event_spinCoaterRightButtonActionPerformed

    private void rampStopButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rampStopButtonActionPerformed
        moving = false;
    }//GEN-LAST:event_rampStopButtonActionPerformed

    private void rampUpButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rampUpButtonActionPerformed
        rampMode++;
        
        if(rampMode > 4) {
            rampMode = 4;
        }
        
        updateRampLabels(rampMode);
        print("Ramp Down pressed ..");
    }//GEN-LAST:event_rampUpButtonActionPerformed

    private void rampDownButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rampDownButtonActionPerformed
        rampMode--;
        
        if(rampMode < 1) {
            rampMode = 1;
        }
        
        updateRampLabels(rampMode);
        print("Ramp Up pressed ..");
    }//GEN-LAST:event_rampDownButtonActionPerformed

    private void rampStartButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rampStartButtonActionPerformed
        rampStep = 1;
        movingTime = pdcDevice.rampMode[1];
        pwmValue = pdcDevice.rampMode[2];
        moving = true;
        rampTimer.start();
        print("Ramp Start pressed ..");
    }//GEN-LAST:event_rampStartButtonActionPerformed

    private void setupMotorButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setupMotorButtonActionPerformed
        print("Display Motor Setup Screen");
        setupRow = 0;
        updateMotorSetupPanel(setupParamIndex);
        updateMotorSetupValue(0);
        showPanel(setupMotorPanel);
    }//GEN-LAST:event_setupMotorButtonActionPerformed
    
    private void updateMotorSetupPanel(int motorIndex) {
        String motorName = pdcDevice.getMotorName(motorIndex);
        
        motorSetupNameLabel.setForeground(Color.red);
        motorSetupNameValueLabel.setText(motorName);
        setupCurrentLabel = motorSetupNameLabel;
        
        print("Selected motor " + motorIndex + " / " + motorName);
    }
    
    private void setupStartModeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setupStartModeButtonActionPerformed
        print("Display Start Mode Setup Screen ...");
        setupCurrentLabel = null;
        setupRow = pdcDevice.startUpIndex;
        selectStartModeSetupRow();
        showPanel(setupStartModePanel);
    }//GEN-LAST:event_setupStartModeButtonActionPerformed

    private void selectStartModeSetupRow() {
        if (setupCurrentLabel != null) {
            setupCurrentLabel.setForeground(Color.white);
        }
        
        switch (setupRow) {
            case 0:
                setupStartModeNoneLabel.setForeground(Color.red);
                setupCurrentLabel = setupStartModeNoneLabel;
                break;
            case 1:
                setupStartModeSCMLabel.setForeground(Color.red);
                setupCurrentLabel = setupStartModeSCMLabel;
                break;
            case 2:
                setupStartModeSCRLabel.setForeground(Color.red);
                setupCurrentLabel = setupStartModeSCRLabel;
                break;
            default:
                setupStartModeDCLabel.setForeground(Color.red);
                setupCurrentLabel = setupStartModeDCLabel;
                break;
        }
    }
    
    private void setupButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setupButtonActionPerformed
        showPanel(setupPanel);
        print("Display Setup Screen ...");
    }//GEN-LAST:event_setupButtonActionPerformed

    private void setupDipCoatButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setupDipCoatButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_setupDipCoatButtonActionPerformed

    private void aboutButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutButtonActionPerformed
        showPanel(aboutPanel);
        print("Display About Screen ...");
    }//GEN-LAST:event_aboutButtonActionPerformed

    private void rampBackButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rampBackButtonActionPerformed
        showPanel(mainPanel);
    }//GEN-LAST:event_rampBackButtonActionPerformed

    private void motorSetupRightButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_motorSetupRightButtonActionPerformed
        setupParamIndex++;
        updateMotorSetupValue(1);
    }//GEN-LAST:event_motorSetupRightButtonActionPerformed

    /**
     * Update motor setup values
     */
    private void updateMotorSetupValue(int change) {
        if(setupRow == 0) { // select info for particular motor
            if(setupParamIndex < pdcDevice.motorCount) {
                String name = pdcDevice.getMotorName(setupParamIndex);
                motorSetupNameValueLabel.setText(name);
                
                pdcDevice.setCurrentMotor(name);
                motorSetupPoleValueLabel.setText("" + pdcDevice.motorPoles);
                motorSetupALabel.setText("a=" + pdcDevice.a);
                motorSetupBLabel.setText("b=" + pdcDevice.b);
                motorSetupCLabel.setText("c=" + pdcDevice.c);
                motorSetupDLabel.setText("d=" + pdcDevice.d);
            } else {
                setupParamIndex = pdcDevice.motorCount - 1;
            }
        } else if(setupRow == 1) {
            int motorPoles = Integer.parseInt(motorSetupPoleValueLabel.getText()) + change;
            
            if(motorPoles >= 1 && motorPoles <= pdcDevice.maxPoles) {
               pdcDevice.motorPoles = motorPoles;
               motorSetupPoleValueLabel.setText("" + motorPoles);
            } 
        } else if(setupRow == 2) {
            String[] sa = motorSetupALabel.getText().split("=");
            float value = Float.parseFloat(sa[1]);
            
            pdcDevice.a = value + (float)change/10;
            String svalue = String.format("%.1f", pdcDevice.a);
            motorSetupALabel.setText("a=" + svalue);
        } else if(setupRow == 3) {
            String[] sa = motorSetupBLabel.getText().split("=");
            float value = Float.parseFloat(sa[1]);
            
            pdcDevice.b = value + change*100;
            String svalue = String.format("%.1f", pdcDevice.b);
            motorSetupBLabel.setText("b=" + svalue);
        } else if(setupRow == 4) {
            String[] sa = motorSetupCLabel.getText().split("=");
            float value = Float.parseFloat(sa[1]);
            
            pdcDevice.c = value + change*10;
            String svalue = String.format("%.1f", pdcDevice.c);
            motorSetupCLabel.setText("c=" + svalue);
        } else if(setupRow == 5) {
            String[] sa = motorSetupDLabel.getText().split("=");
            float value = Float.parseFloat(sa[1]);
            
            pdcDevice.d = value + change*10;
            String svalue = String.format("%.1f", pdcDevice.d);
            motorSetupDLabel.setText("d=" + svalue);
        }
    }
    
    private void motorSetupUpButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_motorSetupUpButtonActionPerformed
        setupRow--;
        
        if(setupRow < 0) {
            setupRow = 0;
        } else {
            selectMotorSetupRow();
        }
    }//GEN-LAST:event_motorSetupUpButtonActionPerformed

    private void motorSetupDownButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_motorSetupDownButtonActionPerformed
        setupRow++;
        
        if(setupRow > 5) {
            setupRow = 5;
        } else {
            selectMotorSetupRow();
        }
    }//GEN-LAST:event_motorSetupDownButtonActionPerformed

    private void selectMotorSetupRow() {
        // reset the parameter index
        setupParamIndex = 0;
        
        // reset the color of the previous selected label
        setupCurrentLabel.setForeground(Color.white);
        
        switch (setupRow) {
            case 0:
                motorSetupNameLabel.setForeground(Color.red);
                setupCurrentLabel = motorSetupNameLabel;
                break;
            case 1:
                //motorSetupParamIndex = Integer.parseInt(motorSetupPoleValueLabel.getText()) - 1;
                motorSetupPoleLabel.setForeground(Color.red);
                setupCurrentLabel = motorSetupPoleLabel;
                break;
            case 2:
                motorSetupALabel.setForeground(Color.red);
                setupCurrentLabel = motorSetupALabel;
                break;
            case 3:
                motorSetupBLabel.setForeground(Color.red);
                setupCurrentLabel = motorSetupBLabel;
                break;
            case 4:
                motorSetupCLabel.setForeground(Color.red);
                setupCurrentLabel = motorSetupCLabel;
                break;
            case 5:
                motorSetupDLabel.setForeground(Color.red);
                setupCurrentLabel = motorSetupDLabel;
                break;
            default:
                break;
        }
    }
    
    private void motorSetupLeftButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_motorSetupLeftButtonActionPerformed
        setupParamIndex--;
        if(setupParamIndex < 0) {
            setupParamIndex = 0;
        }
        
        updateMotorSetupValue(-1);
    }//GEN-LAST:event_motorSetupLeftButtonActionPerformed

    private void setupStartModeUpButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setupStartModeUpButtonActionPerformed
        setupRow--;
        
        if(setupRow < 0) {
            setupRow = 0;
        } else {
            selectStartModeSetupRow();
        }
    }//GEN-LAST:event_setupStartModeUpButtonActionPerformed

    private void setupStartModeDownButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setupStartModeDownButtonActionPerformed
        setupRow++;
        
        if(setupRow > 4) {
            setupRow = 4;
        } else {
            selectStartModeSetupRow();
        }
    }//GEN-LAST:event_setupStartModeDownButtonActionPerformed

    private void stepperSetupRightButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stepperSetupRightButtonActionPerformed
        setupParamIndex++;
        updateStepperSetupValue(1);
    }//GEN-LAST:event_stepperSetupRightButtonActionPerformed

    private void stepperSetupUpButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stepperSetupUpButtonActionPerformed
        setupRow--;
        
        if(setupRow < 0) {
            setupRow = 0;
        } else {
            selectStepperSetupRow();
        }
    }//GEN-LAST:event_stepperSetupUpButtonActionPerformed

    private void stepperSetupDownButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stepperSetupDownButtonActionPerformed
        setupRow++;
        
        if(setupRow > 4) {
            setupRow = 4;
        } else {
            selectStepperSetupRow();
        }
    }//GEN-LAST:event_stepperSetupDownButtonActionPerformed
    
    private void selectStepperSetupRow() {
        // reset the parameter index
        setupParamIndex = 0;
        
        setupCurrentLabel.setForeground(Color.white);
        
        switch (setupRow) {
            case 0:
                setupParamIndex = pdcDevice.stepperActiveIndex;
                stepperSetupActiveLabel.setForeground(Color.red);
                setupCurrentLabel = motorSetupNameLabel;
                break;
            case 1:
                setupParamIndex = pdcDevice.stepperSPRIndex;
                stepperSetupSPRLabel.setForeground(Color.red);
                setupCurrentLabel = stepperSetupSPRLabel;
                break;
            case 2:
                stepperSetupRPMLabel.setForeground(Color.red);
                setupCurrentLabel = stepperSetupRPMLabel;
                break;
            case 3:
                setupParamIndex = pdcDevice.stepperDirectionIndex;
                stepperSetupDirectionLabel.setForeground(Color.red);
                setupCurrentLabel = stepperSetupDirectionLabel;
                break;
            case 4:
                setupParamIndex = pdcDevice.stepperExcitationIndex;
                stepperSetupExcitationLabel.setForeground(Color.red);
                setupCurrentLabel = stepperSetupExcitationLabel;
                break;
            default:
                break;
        }
    }
    
    private void stepperSetupLeftButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stepperSetupLeftButtonActionPerformed
        setupParamIndex--;
        if(setupParamIndex < 0) {
            setupParamIndex = 0;
        }
        
        updateStepperSetupValue(-1);
    }//GEN-LAST:event_stepperSetupLeftButtonActionPerformed
    
    private void setupStepperButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setupStepperButtonActionPerformed
        print("Display Stepper Setup Screen ...");
        updateStepperSetupPanel();
        showPanel(setupStepperPanel);
    }//GEN-LAST:event_setupStepperButtonActionPerformed
    
    private void updateStepperSetupPanel() {
        setupRow = 0;
        setupParamIndex = pdcDevice.stepperActiveIndex;
        
        stepperSetupActiveLabel.setForeground(Color.red);
        stepperSetupActiveValueLabel.setText(pdcDevice.stepperActive[pdcDevice.stepperActiveIndex]);
        setupCurrentLabel = stepperSetupActiveLabel;
        
        stepperSetupSPRValueLabel.setText(pdcDevice.stepperSPR[pdcDevice.stepperSPRIndex]);
        stepperSetupRPMValueLabel.setText("" + pdcDevice.stepperMaxRPM);
        stepperSetupDirectionValueLabel.setText(pdcDevice.stepperDirection[pdcDevice.stepperDirectionIndex]);
        stepperSetupExcitationValueLabel.setText(pdcDevice.stepperExcitation[pdcDevice.stepperExcitationIndex]);
    }
    
    private void updateStepperSetupValue(int change) {
        if(setupRow == 0) {
            if(setupParamIndex < pdcDevice.stepperActive.length) {
                pdcDevice.stepperActiveIndex = setupParamIndex;
                stepperSetupActiveValueLabel.setText(pdcDevice.stepperActive[setupParamIndex]);
            } else {
                setupParamIndex = pdcDevice.stepperActive.length - 1;
            }
        } else if(setupRow == 1) {
            if(setupParamIndex < pdcDevice.stepperSPR.length) {
                pdcDevice.stepperSPRIndex = setupParamIndex;
                stepperSetupSPRValueLabel.setText(pdcDevice.stepperSPR[setupParamIndex]);
            } else {
                setupParamIndex = pdcDevice.stepperSPR.length - 1;
            }
        } else if(setupRow == 2) {
            int maxRPM = Integer.parseInt(stepperSetupRPMValueLabel.getText()) + change*100;
            
            if(maxRPM >= 1 && maxRPM <= pdcDevice.stepperRPMLimit) {
               pdcDevice.stepperMaxRPM = maxRPM;
               stepperSetupRPMValueLabel.setText("" + maxRPM);
            }
        } else if(setupRow == 3) {
            if(setupParamIndex < pdcDevice.stepperDirection.length) {
                pdcDevice.stepperDirectionIndex = setupParamIndex;
                stepperSetupDirectionValueLabel.setText(pdcDevice.stepperDirection[setupParamIndex]);
            } else {
                setupParamIndex = pdcDevice.stepperDirection.length - 1;
            }
        } else if(setupRow == 4) {
            if(setupParamIndex < pdcDevice.stepperExcitation.length) {
                pdcDevice.stepperExcitationIndex = setupParamIndex;
                stepperSetupExcitationValueLabel.setText(pdcDevice.stepperExcitation[setupParamIndex]);
            } else {
                setupParamIndex = pdcDevice.stepperExcitation.length - 1;
            }
        }
    }
    
    private void rampSetupRightButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rampSetupRightButtonActionPerformed
        setupParamIndex++;
        updateRampSetupValue(1);
    }//GEN-LAST:event_rampSetupRightButtonActionPerformed

    private void rampSetupUpButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rampSetupUpButtonActionPerformed
        setupRow--;
        
        if(setupRow < 0) {
            setupRow = 0;
        } else {
            selectRampSetupRow();
        }
    }//GEN-LAST:event_rampSetupUpButtonActionPerformed

    private void rampSetupDownButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rampSetupDownButtonActionPerformed
        setupRow++;
        
        if(setupRow > 3) {
            setupRow = 3;
        } else {
            selectRampSetupRow();
        }
    }//GEN-LAST:event_rampSetupDownButtonActionPerformed

    private void selectRampSetupRow() {
        // reset the parameter index
        setupCurrentLabel.setForeground(Color.white);
        
        switch (setupRow) {
            case 0:
                rampSetupMinRPMLabel.setForeground(Color.red);
                setupCurrentLabel = rampSetupMinRPMLabel;
                break;
            case 1:
                rampSetupMinTimeLabel.setForeground(Color.red);
                setupCurrentLabel = rampSetupMinTimeLabel;
                rampSetupSpeedLabel.setText("0");
                rampSetupPWMLabel.setText("1000");
                
                // Stop the motor spinning
                pwmValue = 1000;
                break;
            case 2:
                rampSetupMaxRPMLabel.setForeground(Color.red);
                setupCurrentLabel = rampSetupMaxRPMLabel;
                break;
            case 3:
                rampSetupMaxTimeLabel.setForeground(Color.red);
                setupCurrentLabel = rampSetupMaxTimeLabel;
                rampSetupSpeedLabel.setText("0");
                rampSetupPWMLabel.setText("1000");
                
                //Stop the motor spinning
                pwmValue = 1000;
                break;
            default:
                break;
        }
    }
    
    private void rampSetupLeftButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rampSetupLeftButtonActionPerformed
        setupParamIndex--;
        if(setupParamIndex < 0) {
            setupParamIndex = 0;
        }
        
        updateRampSetupValue(-1);
    }//GEN-LAST:event_rampSetupLeftButtonActionPerformed
    
    private void updateRampSetupValue(int change) {
        if(setupRow == 0) {
            // get the current pwm value and and start motor moving
            int pwm = pdcDevice.rampMode[2] + change*SETUP_INCREMENT[setupIncrementIndex];
            
            if(pwm < 1000 || pwm > 2000 ) {
                return;
            }
            
            int speed = pdcDevice.getSpeed(pwm);
            
            // update the UI
            rampSetupSpeedLabel.setText("" + speed);
            rampSetupPWMLabel.setText("" + pwm);
            rampSetupMinRPMValueLabel.setText(speed + " ("  + pwm + " us)");
            
            // store this value
            pdcDevice.rampMode[0] = speed;
            pdcDevice.rampMode[2] = pwm;
        } else if(setupRow == 1) {
            int time = pdcDevice.rampMode[1] + change*SETUP_INCREMENT[setupIncrementIndex];
            rampSetupMinTimeValueLabel.setText("" + time);
            pdcDevice.rampMode[1] = time;
        } else if(setupRow == 2) {
            // get the current pwm value and and start motor moving
            int pwm = pdcDevice.rampMode[5] + change*SETUP_INCREMENT[setupIncrementIndex];
            
            if(pwm < 1000 || pwm > 2000 ) {
                return;
            }
            
            int speed = pdcDevice.getSpeed(pwm);
            
            // update the UI
            rampSetupSpeedLabel.setText("" + speed);
            rampSetupPWMLabel.setText("" + pwm);
            rampSetupMaxRPMValueLabel.setText(speed + " ("  + pwm + " us)");
            
            // store this value
            pdcDevice.rampMode[3] = speed;
            pdcDevice.rampMode[5] = pwm;
        } else if(setupRow == 3) {
            int time = pdcDevice.rampMode[4] + change*SETUP_INCREMENT[setupIncrementIndex];
            rampSetupMaxTimeValueLabel.setText("" + time);
            pdcDevice.rampMode[4] = time;
        }
    }
    
    private void rampSetupIncrementButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rampSetupIncrementButtonActionPerformed
        setupIncrementIndex++;
        if(setupIncrementIndex >= SETUP_INCREMENT.length) {
            setupIncrementIndex = 0;
        }
        
        int setupIncrement = SETUP_INCREMENT[setupIncrementIndex];
        rampSetupIncrementButton.setText("INC * " + setupIncrement);
        
        print("Setting ramp panel increment to " + setupIncrement);
    }//GEN-LAST:event_rampSetupIncrementButtonActionPerformed

    private void backSetupButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backSetupButtonActionPerformed
        pdcDevice.saveMotorInfo();
        setupCurrentLabel.setForeground(Color.white);
        showPanel(setupPanel);
        print("Motor Setup Back Pressed ...");
        print("Saving motor information");
    }//GEN-LAST:event_backSetupButtonActionPerformed

    private void setupRampButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setupRampButton1ActionPerformed
        JButton sourceButton = (JButton)evt.getSource();
        String[] sa = sourceButton.getText().split(" # ");
        rampPanelNumber = Integer.parseInt(sa[1]);
        pdcDevice.setRampModeData(rampPanelNumber);
        
        print("Display Ramp Setup Panrl # " + rampPanelNumber);
        updateRampSetupPanel();
        showPanel(setupRampModePanel);
    }//GEN-LAST:event_setupRampButton1ActionPerformed
    
    private void updateRampSetupPanel() {
        setupRow = 0;
        
        rampSetupModeLabel.setText("SETUP / RAMP MODE # " + rampPanelNumber);
        
        rampSetupMinRPMLabel.setForeground(Color.red);
        setupCurrentLabel = rampSetupMinRPMLabel;
        
        rampSetupMinRPMValueLabel.setText(pdcDevice.rampMode[0] + " ("  + pdcDevice.rampMode[2] + " us)");
        rampSetupMinTimeValueLabel.setText("" + pdcDevice.rampMode[1]);
        rampSetupMaxRPMValueLabel.setText(pdcDevice.rampMode[3] + " ("  + pdcDevice.rampMode[5] + " us)");
        rampSetupMaxTimeValueLabel.setText("" + pdcDevice.rampMode[4]);
        
        rampSetupSpeedLabel.setText("0");
        rampSetupPWMLabel.setText("1000");
        
        int setupIncrement = SETUP_INCREMENT[setupIncrementIndex];
        rampSetupIncrementButton.setText("INC * " + setupIncrement);
    }
    
    private void clearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearButtonActionPerformed
        consoleTextArea.setText("");
    }//GEN-LAST:event_clearButtonActionPerformed

    private void keyPadButton01ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_keyPadButton01ActionPerformed
        clearCount = 0; // always reset this if input detected
        
        JButton button = (JButton)evt.getSource();
        keypadValue += button.getText();
        
        // reset the value to valid speed range if needed
        int speed = new Integer(keypadValue); // speed value
        int pwm = pdcDevice.getPWM(speed);
        
        if(pwm > 2000) {
            keyPadInputLabel.setText("SPEED INPUT -> ***INVALID VALUE + " + keypadValue);
            keypadValue = "";
        } else {
            keyPadInputLabel.setText("SPEED INPUT -> RPM: " + keypadValue + " / PWM: " + pwm + " us");
        }
        
        print("current Keypad Value " + keypadValue);
    }//GEN-LAST:event_keyPadButton01ActionPerformed

    private void keyPadOKButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_keyPadOKButtonActionPerformed
        int speed = new Integer(keypadValue); // speed value
        pwmValue = pdcDevice.getPWM(speed);
        spinCoaterPWMLabel.setText("" + pwmValue);
        showPanel(lastPanel);
    }//GEN-LAST:event_keyPadOKButtonActionPerformed

    private void setupStartModeBackButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setupStartModeBackButtonActionPerformed
        pdcDevice.startUpIndex = setupRow;
        setupCurrentLabel.setForeground(Color.white);
        showPanel(setupPanel);
        print("Start Mode Setup Back Pressed ...");
        print("Saving start up mode");
    }//GEN-LAST:event_setupStartModeBackButtonActionPerformed

    private void stepperSetupBackButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stepperSetupBackButtonActionPerformed
        showPanel(setupPanel);
        setupCurrentLabel.setForeground(Color.white);
        print("Saving stepper motor information");
    }//GEN-LAST:event_stepperSetupBackButtonActionPerformed

    private void rampSetupBackButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rampSetupBackButtonActionPerformed
        showPanel(setupPanel);
        setupCurrentLabel.setForeground(Color.white);
        pdcDevice.saveRampModeData(rampPanelNumber);
        print("Saving ramp mode information # " + rampPanelNumber);
    }//GEN-LAST:event_rampSetupBackButtonActionPerformed
    
    public void showPanel(JPanel panel) {
        screenPanel.removeAll();
        screenPanel.add(panel);
        screenPanel.repaint();
        revalidate();
    }
    /**
     * The the main panel
     */
    public void showMainPanel() {
        showPanel(mainPanel);
    }
    
    /**
     * Print text to the console
     * @param text 
     */
    public void print(String text) {
        consoleTextArea.append(text + "\n");
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PDCTouchFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PDCTouchFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PDCTouchFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PDCTouchFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                PDCTouchFrame pdcFrame = new PDCTouchFrame();
                pdcFrame.showMainPanel();
                pdcFrame.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton aboutButton;
    private javax.swing.JPanel aboutPanel;
    private javax.swing.JButton backButton3;
    private javax.swing.JButton backButton4;
    private javax.swing.JButton backSetupButton;
    private javax.swing.JButton clearButton;
    private javax.swing.JButton closeButton;
    private javax.swing.JTextArea consoleTextArea;
    private javax.swing.JButton dipCoaterButton;
    private javax.swing.JPanel dipCoaterPanel;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel39;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JLabel jLabel42;
    private javax.swing.JLabel jLabel43;
    private javax.swing.JLabel jLabel44;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel56;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel61;
    private javax.swing.JLabel jLabel64;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel84;
    private javax.swing.JLabel jLabel86;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JButton keyPadButton00;
    private javax.swing.JButton keyPadButton01;
    private javax.swing.JButton keyPadButton02;
    private javax.swing.JButton keyPadButton03;
    private javax.swing.JButton keyPadButton04;
    private javax.swing.JButton keyPadButton05;
    private javax.swing.JButton keyPadButton06;
    private javax.swing.JButton keyPadButton07;
    private javax.swing.JButton keyPadButton08;
    private javax.swing.JButton keyPadButton09;
    private javax.swing.JButton keyPadClearButton;
    private javax.swing.JLabel keyPadInputLabel;
    private javax.swing.JPanel keyPadInputPanel;
    private javax.swing.JButton keyPadOKButton;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JLabel motorSetupALabel;
    private javax.swing.JLabel motorSetupBLabel;
    private javax.swing.JLabel motorSetupCLabel;
    private javax.swing.JLabel motorSetupDLabel;
    private javax.swing.JButton motorSetupDownButton;
    private javax.swing.JButton motorSetupLeftButton;
    private javax.swing.JLabel motorSetupNameLabel;
    private javax.swing.JLabel motorSetupNameValueLabel;
    private javax.swing.JLabel motorSetupPoleLabel;
    private javax.swing.JLabel motorSetupPoleValueLabel;
    private javax.swing.JButton motorSetupRightButton;
    private javax.swing.JButton motorSetupUpButton;
    private javax.swing.JButton rampBackButton;
    private javax.swing.JButton rampDownButton;
    private javax.swing.JLabel rampMaxLabel;
    private javax.swing.JLabel rampMaxSpeedLabel;
    private javax.swing.JLabel rampMaxTimeLabel;
    private javax.swing.JLabel rampMinLabel;
    private javax.swing.JLabel rampMinSpeedLabel;
    private javax.swing.JLabel rampMinTimeLabel;
    private javax.swing.JLabel rampModeLabel;
    private javax.swing.JLabel rampPWMLabel;
    private javax.swing.JButton rampSetupBackButton;
    private javax.swing.JButton rampSetupDownButton;
    private javax.swing.JButton rampSetupIncrementButton;
    private javax.swing.JButton rampSetupLeftButton;
    private javax.swing.JLabel rampSetupMaxRPMLabel;
    private javax.swing.JLabel rampSetupMaxRPMValueLabel;
    private javax.swing.JLabel rampSetupMaxTimeLabel;
    private javax.swing.JLabel rampSetupMaxTimeValueLabel;
    private javax.swing.JLabel rampSetupMinRPMLabel;
    private javax.swing.JLabel rampSetupMinRPMValueLabel;
    private javax.swing.JLabel rampSetupMinTimeLabel;
    private javax.swing.JLabel rampSetupMinTimeValueLabel;
    private javax.swing.JLabel rampSetupModeLabel;
    private javax.swing.JLabel rampSetupPWMLabel;
    private javax.swing.JButton rampSetupRightButton;
    private javax.swing.JLabel rampSetupSpeedLabel;
    private javax.swing.JButton rampSetupUpButton;
    private javax.swing.JLabel rampSpeedLabel;
    private javax.swing.JButton rampStartButton;
    private javax.swing.JButton rampStopButton;
    private javax.swing.JButton rampUpButton;
    private javax.swing.JPanel screenPanel;
    private javax.swing.JButton setupBackButton;
    private javax.swing.JButton setupButton;
    private javax.swing.JButton setupButton5;
    private javax.swing.JButton setupButton6;
    private javax.swing.JButton setupButton7;
    private javax.swing.JButton setupDipCoatButton;
    private javax.swing.JButton setupMotorButton;
    private javax.swing.JLabel setupMotorLabel;
    private javax.swing.JPanel setupMotorPanel;
    private javax.swing.JPanel setupPanel;
    private javax.swing.JButton setupRampButton1;
    private javax.swing.JButton setupRampButton2;
    private javax.swing.JButton setupRampButton3;
    private javax.swing.JButton setupRampButton4;
    private javax.swing.JPanel setupRampModePanel;
    private javax.swing.JButton setupStartModeBackButton;
    private javax.swing.JButton setupStartModeButton;
    private javax.swing.JLabel setupStartModeDCLabel;
    private javax.swing.JButton setupStartModeDownButton;
    private javax.swing.JLabel setupStartModeNoneLabel;
    private javax.swing.JPanel setupStartModePanel;
    private javax.swing.JLabel setupStartModeSCMLabel;
    private javax.swing.JLabel setupStartModeSCRLabel;
    private javax.swing.JButton setupStartModeUpButton;
    private javax.swing.JButton setupStepperButton;
    private javax.swing.JPanel setupStepperPanel;
    private javax.swing.JLabel speedInputLabel1;
    private javax.swing.JButton spinCoaterBackButton;
    private javax.swing.JButton spinCoaterButton;
    private javax.swing.JButton spinCoaterGoButton;
    private javax.swing.JButton spinCoaterIncrementButton;
    private javax.swing.JButton spinCoaterInputButton;
    private javax.swing.JButton spinCoaterLeftButton;
    private javax.swing.JLabel spinCoaterPWMLabel;
    private javax.swing.JPanel spinCoaterPanel;
    private javax.swing.JButton spinCoaterRampButton;
    private javax.swing.JPanel spinCoaterRampPanel;
    private javax.swing.JButton spinCoaterRightButton;
    private javax.swing.JLabel spinCoaterSpeedLabel;
    private javax.swing.JLabel spinCoaterTimerLabel;
    private javax.swing.JLabel stepperSetupActiveLabel;
    private javax.swing.JLabel stepperSetupActiveValueLabel;
    private javax.swing.JButton stepperSetupBackButton;
    private javax.swing.JLabel stepperSetupDirectionLabel;
    private javax.swing.JLabel stepperSetupDirectionValueLabel;
    private javax.swing.JButton stepperSetupDownButton;
    private javax.swing.JLabel stepperSetupExcitationLabel;
    private javax.swing.JLabel stepperSetupExcitationValueLabel;
    private javax.swing.JButton stepperSetupLeftButton;
    private javax.swing.JLabel stepperSetupRPMLabel;
    private javax.swing.JLabel stepperSetupRPMValueLabel;
    private javax.swing.JButton stepperSetupRightButton;
    private javax.swing.JLabel stepperSetupSPRLabel;
    private javax.swing.JLabel stepperSetupSPRValueLabel;
    private javax.swing.JButton stepperSetupUpButton;
    // End of variables declaration//GEN-END:variables

}
